# OpenAI Codex Configuration
# Generated by AgentPM for Agent PM
# Generated: 2025-10-27T13:13:48.397366
#
# Codex Configuration Reference:
# - Model: LLM model identifier (e.g., gpt-5-codex, o3)
# - Approval Policy: When to request approval (on-request, on-failure, untrusted)
# - Sandbox Mode: Execution restrictions (workspace-write, read-only, none)
# - Profiles: Named configurations for different tasks
#
# AGENTS.md Integration:
# Codex natively reads AGENTS.md through project_doc_fallback_filenames.
# No transformation needed - AGENTS.md is used directly!

# ============================================================================
# Core Configuration
# ============================================================================

model = "gpt-4"
approval_policy = "on-request"
sandbox_mode = "workspace-write"

# Configure AGENTS.md as primary instruction file
# Codex will read AGENTS.md natively for project context
# Fallback to CLAUDE.md or GEMINI.md if AGENTS.md not found
project_doc_fallback_filenames = ["CLAUDE.md", "GEMINI.md"]

# ============================================================================
# Sandbox Configuration
# ============================================================================

[sandbox_workspace_write]
# Allow file system writes within project workspace
network_access = false
exclude_tmpdir_env_var = false

[sandbox_read_only]
# Restrict to read-only operations (for analysis/review tasks)
network_access = false
exclude_tmpdir_env_var = false

# ============================================================================
# Shell Environment Policy
# ============================================================================

[shell_environment_policy]
# Inherit core environment variables (PATH, HOME, etc.)
inherit = "core"

# ============================================================================
# APM-Specific Profiles
# ============================================================================
# Profiles optimize model selection and approval policies for specific tasks.
# Usage: codex --profile planning "Analyze requirements"

[profiles.planning]
# Planning and architecture design (D1/P1 phases)
model = "o3"
model_provider = "openai"
approval_policy = "on-request"
model_reasoning_effort = "high"
sandbox_mode = "read-only"
description = "High-reasoning model for planning, architecture, and requirements analysis"

[profiles.implementation]
# Code implementation (I1 phase)
model = "gpt-5-codex"
model_provider = "openai"
approval_policy = "on-failure"
sandbox_mode = "workspace-write"
description = "Code generation optimized model for implementation tasks"

[profiles.testing]
# Testing and validation (R1 phase)
model = "gpt-4o-mini"
model_provider = "openai"
approval_policy = "untrusted"
sandbox_mode = "workspace-write"
description = "Fast model for test generation and validation"

[profiles.documentation]
# Documentation generation
model = "gpt-4o"
model_provider = "openai"
approval_policy = "on-request"
sandbox_mode = "workspace-write"
description = "Balanced model for documentation and user guides"

[profiles.review]
# Code review and quality checks
model = "o3"
model_provider = "openai"
approval_policy = "untrusted"
model_reasoning_effort = "medium"
sandbox_mode = "read-only"
description = "High-reasoning model for code review and quality analysis"

# ============================================================================
# OpenTelemetry Configuration
# ============================================================================

[otel]
# Telemetry and monitoring configuration
environment = "agent-pm"
exporter = "none"
log_user_prompt = false

# ============================================================================
# APM Integration Notes
# ============================================================================
# This configuration is generated from the APM database.
# To regenerate: apm config generate --provider=codex
#
# Database-driven configuration:
# - Agents: 85 agents loaded from database
# - Rules: 76 rules enforced
# - Project: Agent PM
#
# Codex reads AGENTS.md natively - no transformation needed!
# AGENTS.md contains:
# - Project context and tech stack
# - Agent definitions and SOPs
# - Quality gates and rules
# - Workflow phases and processes
