# Cursor Integration Consolidation Design Specification

**Version**: 1.0.0
**Date**: 2025-10-20
**Work Item**: WI-118 "Full Cursor Integration"
**Author**: AIPM Design Team
**Status**: Design Phase Complete

---

## Executive Summary

This design consolidates the current 22 scattered Cursor rule files into a streamlined architecture:
- **1 master rule** (`aipm-master.mdc`) - Core orchestration and workflow
- **5 auto-attach rules** - Context-aware domain-specific guidance
- **6 custom modes** - Phase-based workflow environments (D1, P1, I1, R1, O1, E1)

**Approach**: CLI-only (no MCP server), database-first via `apm` commands, zero file duplication.

**Key Benefits**:
- Reduces cognitive load from 22 files to 6 active files
- Context-aware auto-attachment based on file patterns
- Phase-specific custom modes aligned with APM (Agent Project Manager) workflow
- Database-first: Rules, contexts, and state from live database
- Agent-friendly: Clear command usage patterns by workflow phase

---

## 1. Current State Analysis

### 1.1 Existing Rule Files (22 Total)

**Infrastructure Rules** (23% - 5 files):
- `project-architecture.mdc` - System overview
- `plugin-architecture.mdc` - Plugin patterns
- `context-system.mdc` - Context assembly
- `development-overview.mdc` - Development guide
- `service-patterns.mdc` - Service coordinator pattern

**Implementation Rules** (27% - 6 files):
- `coding-standards.mdc` - Code quality
- `cli-development.mdc` - CLI patterns
- `database-patterns.mdc` - Three-layer architecture
- `testing-standards.mdc` - Test patterns
- `security-patterns.mdc` - Security requirements
- `workflow-quality-gates.mdc` - Quality enforcement

**Documentation Rules** (14% - 3 files):
- `documentation-style.mdc` - Style guide
- `cli-docs-standards.mdc` - CLI documentation
- `documentation-quality-gates.mdc` - Doc quality
- `context-docs.mdc` - Context documentation

**Cursor-Specific Rules** (32% - 7 files):
- `cursor-workflow-guide.mdc` - Workflow overview
- `cursor-quick-reference.mdc` - Command reference
- `cursor-workflow-patterns.mdc` - Pattern guide
- `cursor-trigger-matrix.mdc` - Feature mapping
- `cursor-comprehensive-checklist.mdc` - Checklist
- `cursor-issue-tracking-rule.mdc` - Issue handling
- `cursor-proactive-aipm-usage.mdc` - Proactive triggers

**Agent Rules** (4% - 1 file):
- `agent-enablement.mdc` - Agent integration

### 1.2 Pain Points Identified

1. **Cognitive Overload**: 22 files create confusion about which rule applies
2. **Duplication**: Similar content across multiple files (e.g., workflow guidance)
3. **Maintenance Burden**: Updates require touching multiple files
4. **Unclear Precedence**: When rules conflict, unclear which takes priority
5. **Context Loss**: Rules don't align with APM (Agent Project Manager) phase progression
6. **File Drift**: Cursor-specific rules duplicate content from core rules

### 1.3 Content Analysis

**Distribution by Purpose**:
- Workflow orchestration: 32% (mostly Cursor-specific)
- Implementation patterns: 27% (database, CLI, testing)
- Documentation standards: 14% (style, quality)
- Architecture guidance: 23% (system design)
- Agent integration: 4% (agent patterns)

**Key Insight**: 32% of content is Cursor-specific orchestration that can be consolidated into master rule + custom modes.

---

## 2. Consolidated Architecture

### 2.1 Design Principles

1. **Single Source of Truth**: Master rule orchestrates, domain rules specialize
2. **Auto-Attach Intelligence**: Rules activate based on file context
3. **Phase Alignment**: Custom modes map to APM (Agent Project Manager) phases (D1-E1)
4. **Database-First**: All state/rules queried from database, not files
5. **Zero Duplication**: Each concept defined once, referenced elsewhere
6. **Agent-Optimized**: Clear command patterns, actionable guidance

### 2.2 File Structure

```
.cursor/rules/
├── aipm-master.mdc                    # Master orchestrator (ALWAYS active)
├── python-implementation.mdc          # Auto-attach: **/*.py
├── testing-standards.mdc              # Auto-attach: tests/**/*.py
├── cli-development.mdc                # Auto-attach: agentpm/cli/**/*.py
├── database-patterns.mdc              # Auto-attach: **/adapters/**/*.py, **/methods/**/*.py
└── documentation-quality.mdc          # Auto-attach: docs/**/*.md

.cursor/modes/
├── d1-discovery.json                  # D1 Phase Mode
├── p1-planning.json                   # P1 Phase Mode
├── i1-implementation.json             # I1 Phase Mode
├── r1-review.json                     # R1 Phase Mode
├── o1-operations.json                 # O1 Phase Mode
└── e1-evolution.json                  # E1 Phase Mode
```

**Total Files**: 6 rules + 6 modes = **12 files** (down from 22)

### 2.3 Rule Hierarchy

```
aipm-master.mdc (ALWAYS ACTIVE)
  ├─ Workflow orchestration
  ├─ Phase progression (D1 → P1 → I1 → R1 → O1 → E1)
  ├─ Database-first command usage
  ├─ Quality gate validation
  └─ Agent delegation patterns

Auto-Attach Rules (CONTEXT-AWARE)
  ├─ python-implementation.mdc     → Triggered by: **/*.py
  ├─ testing-standards.mdc         → Triggered by: tests/**/*.py
  ├─ cli-development.mdc           → Triggered by: agentpm/cli/**/*.py
  ├─ database-patterns.mdc         → Triggered by: **/adapters/**/*.py, **/methods/**/*.py
  └─ documentation-quality.mdc     → Triggered by: docs/**/*.md

Custom Modes (USER-SELECTED)
  ├─ d1-discovery.json             → Phase: D1 Discovery
  ├─ p1-planning.json              → Phase: P1 Planning
  ├─ i1-implementation.json        → Phase: I1 Implementation
  ├─ r1-review.json                → Phase: R1 Review
  ├─ o1-operations.json            → Phase: O1 Operations
  └─ e1-evolution.json             → Phase: E1 Evolution
```

---

## 3. Master Rule Specification

### 3.1 Purpose

`aipm-master.mdc` is the single source of truth for:
- Workflow orchestration and phase progression
- Database-first command patterns
- Quality gate enforcement
- Agent delegation strategies
- Error handling and escalation

### 3.2 Core Sections

```markdown
# APM (Agent Project Manager) Master Rule - Cursor Integration

## 1. Database-First Architecture (CRITICAL)
- Rules from database: `apm rules list`
- State from database: `apm status`, `apm work-item show <id>`
- NO file-based state reading
- Runtime queries via `apm` commands only

## 2. Workflow Phases
### Phase Progression: D1 → P1 → I1 → R1 → O1 → E1
[Table of phases with gates, commands, and deliverables]

## 3. Command Usage Matrix
### By Phase
[Matrix: Phase × Common Operations × apm commands]

## 4. Quality Gates
### Automated Gate Validation
- CI-001: Agent validation
- CI-002: Context quality (confidence ≥ 0.70)
- CI-004: Testing coverage (≥ 90%)
- CI-006: Documentation standards

## 5. Agent Delegation
### When to Delegate
[Trigger patterns → Agent selection]

## 6. Error Patterns & Recovery
### Common Issues
[Error signature → Diagnostic commands → Recovery steps]

## 7. Custom Mode Selection
### Phase-Based Modes
[When to activate D1/P1/I1/R1/O1/E1 modes]
```

### 3.3 Always Active

```yaml
---
alwaysApply: true
description: APM (Agent Project Manager) master orchestrator - workflow, commands, quality gates
priority: 100
---
```

### 3.4 Size Target

**Target**: ≤ 15KB (approximately 500 lines)
**Rationale**: Must load quickly while providing comprehensive guidance

---

## 4. Auto-Attach Rule Specifications

### 4.1 python-implementation.mdc

**Trigger Pattern**: `**/*.py`
**Purpose**: Python coding standards, three-layer architecture, type safety
**Size**: ≤ 8KB

**Content**:
```markdown
# Python Implementation Standards

## 1. Three-Layer Architecture (MANDATORY)
### Layer 1: Models (Pydantic)
[Model patterns with examples]

### Layer 2: Adapters
[Adapter patterns for DB conversion]

### Layer 3: Methods
[Business logic patterns]

## 2. Type Safety
- Type hints on all functions
- Pydantic models for validation
- No Dict[str, Any] in public APIs

## 3. Code Quality
- Black formatting (line length 100)
- Ruff linting (strict mode)
- Import organization (isort)

## 4. Error Handling
- Custom exceptions per domain
- ServiceResult pattern for operations
- Actionable error messages

## 5. When to Use
- Writing/editing Python source files
- Creating new services or adapters
- Refactoring existing code
```

**Trigger Conditions**:
```yaml
---
globs:
  - "**/*.py"
  - "!tests/**/*.py"  # Exclude tests (separate rule)
description: Python implementation patterns for APM (Agent Project Manager)
priority: 80
---
```

### 4.2 testing-standards.mdc

**Trigger Pattern**: `tests/**/*.py`
**Purpose**: Test patterns, coverage requirements, AAA pattern
**Size**: ≤ 6KB

**Content**:
```markdown
# Testing Standards

## 1. Test Organization
- Arrange-Act-Assert pattern
- Descriptive test names (test_operation_success)
- Class-based test suites

## 2. Coverage Requirements
- Overall: ≥ 90%
- Critical paths: 100%
- User-facing code: ≥ 95%
- Data layer: ≥ 90%
- Security code: 100%

## 3. Fixture Patterns
- Pytest fixtures for setup
- Temporary directories for database tests
- Mock external dependencies

## 4. Test Categories
- Unit tests: Individual methods
- Integration tests: Component interaction
- E2E tests: Full workflow validation

## 5. Quality Checks
[Command to run tests with coverage]
```

**Trigger Conditions**:
```yaml
---
globs:
  - "tests/**/*.py"
  - "**/*_test.py"
  - "**/test_*.py"
description: Testing patterns and coverage requirements
priority: 85
---
```

### 4.3 cli-development.mdc

**Trigger Pattern**: `agentpm/cli/**/*.py`
**Purpose**: Click + Rich patterns, input validation, CLI standards
**Size**: ≤ 7KB

**Content**:
```markdown
# CLI Development Standards

## 1. Click + Rich Architecture
- Click for command structure
- Rich for all output formatting
- No plain print() statements

## 2. Command Patterns
- LazyGroup for fast startup (<100ms)
- Consistent option naming
- Comprehensive help text

## 3. Input Validation
- Click validators at boundaries
- Type hints with click.Path/IntRange
- Error messages with guidance

## 4. Output Formatting
- Rich tables for lists
- Rich panels for status
- Color coding: green (✓), yellow (⚠), red (✗)

## 5. Performance
- Startup: <100ms
- Command execution: <2s
- Context generation: <5s
```

**Trigger Conditions**:
```yaml
---
globs:
  - "agentpm/cli/**/*.py"
  - "agentpm/commands/**/*.py"
description: CLI development patterns with Click and Rich
priority: 85
---
```

### 4.4 database-patterns.mdc

**Trigger Pattern**: `**/adapters/**/*.py`, `**/methods/**/*.py`
**Purpose**: Database three-layer pattern, SQLite patterns
**Size**: ≤ 10KB

**Content**:
```markdown
# Database Patterns

## 1. Three-Layer Pattern (MANDATORY)
### Models → Adapters → Methods
[Detailed examples of each layer]

## 2. Service Coordinator Pattern
[ServiceResult pattern, transaction handling]

## 3. Schema Patterns
- Consistent naming (snake_case)
- JSON columns for complex data
- Timestamps in ISO format
- Indexes for performance

## 4. Migration Patterns
[Version migration examples]

## 5. Testing Database Code
[Test patterns for database operations]
```

**Trigger Conditions**:
```yaml
---
globs:
  - "**/adapters/**/*.py"
  - "**/methods/**/*.py"
  - "**/database/**/*.py"
  - "**/models/**/*.py"
description: Database three-layer architecture patterns
priority: 90
---
```

### 4.5 documentation-quality.mdc

**Trigger Pattern**: `docs/**/*.md`
**Purpose**: Documentation standards, structure, quality gates
**Size**: ≤ 5KB

**Content**:
```markdown
# Documentation Quality Standards

## 1. Document Structure
### Required Path: docs/{category}/{document_type}/{filename}
Categories: architecture, planning, guides, reference, processes, governance, operations, communication, testing

## 2. Content Standards
- Clear headings (H1, H2, H3)
- Code examples with syntax highlighting
- Tables for comparisons
- Decision rationale included

## 3. Style Guide
- Active voice preferred
- Present tense for current state
- Avoid jargon without explanation
- Include examples for complex concepts

## 4. Quality Gates
- Description ≥ 50 chars
- No placeholder text (TODO, TBD, FIXME)
- Business context required
- Links must be valid

## 5. Metadata Requirements
[YAML frontmatter standards]
```

**Trigger Conditions**:
```yaml
---
globs:
  - "docs/**/*.md"
  - "*.md"
description: Documentation quality and structure standards
priority: 75
---
```

---

## 5. Custom Mode Specifications

### 5.1 Mode Architecture

Custom modes are **phase-specific environments** that configure Cursor with:
- Relevant tools for the phase
- Phase-specific `apm` command guidance
- Gate validation reminders
- Next-step suggestions

**Mode Format** (JSON):
```json
{
  "name": "AIPM D1 Discovery",
  "description": "D1 Phase: Requirements gathering and 6W analysis",
  "tools": {
    "enabled": ["terminal", "editor", "grep", "search"],
    "disabled": ["build", "debug"]
  },
  "rules": {
    "additional": [".cursor/rules/aipm-master.mdc"],
    "disabled": []
  },
  "commands": {
    "suggested": [
      "apm work-item show <id>",
      "apm context show --work-item-id=<id>",
      "apm work-item validate <id>"
    ],
    "shortcuts": {
      "wi": "apm work-item show",
      "ctx": "apm context show --work-item-id=",
      "val": "apm work-item validate"
    }
  },
  "checklist": [
    "Business context defined (≥ 50 chars)",
    "Acceptance criteria created (≥ 3)",
    "Risks identified (≥ 1)",
    "6W confidence ≥ 0.70"
  ],
  "gateValidation": "apm work-item validate <id> --gate=D1",
  "nextPhase": "P1 Planning",
  "documentation": "docs/planning/requirements/"
}
```

### 5.2 D1 Discovery Mode

**File**: `.cursor/modes/d1-discovery.json`
**Phase**: D1 Discovery (Requirements Gathering)
**Gate**: Business context + AC≥3 + risks + 6W confidence≥0.70

**Configuration**:
```json
{
  "name": "AIPM D1 Discovery",
  "description": "D1 Phase: Define requirements and gather 6W context",
  "tools": {
    "enabled": ["terminal", "editor", "grep", "search", "context"],
    "disabled": ["build", "debug", "deploy"]
  },
  "commands": {
    "suggested": [
      "apm work-item show <id>",
      "apm context show --work-item-id=<id>",
      "apm idea analyze <id> --comprehensive",
      "apm learnings list --search='relevant keywords'",
      "apm work-item validate <id>"
    ],
    "shortcuts": {
      "wi": "apm work-item show",
      "ctx": "apm context show --work-item-id=",
      "idea": "apm idea analyze",
      "val": "apm work-item validate"
    }
  },
  "checklist": [
    "Business context defined (≥ 50 chars)",
    "Acceptance criteria created (≥ 3)",
    "Risks identified (≥ 1)",
    "6W confidence ≥ 0.70 (WHO, WHAT, WHEN, WHERE, WHY, HOW)"
  ],
  "gateValidation": "apm work-item validate <id> --gate=D1",
  "agentDelegation": "definition-orch",
  "nextPhase": "P1 Planning",
  "documentation": "docs/planning/requirements/",
  "guidance": [
    "Focus on WHY before HOW",
    "Gather evidence for decisions",
    "Interview stakeholders for context",
    "Document assumptions explicitly",
    "Link to similar past work items"
  ]
}
```

### 5.3 P1 Planning Mode

**File**: `.cursor/modes/p1-planning.json`
**Phase**: P1 Planning (Task Decomposition)
**Gate**: Tasks created + estimates + dependencies + mitigations

**Configuration**:
```json
{
  "name": "AIPM P1 Planning",
  "description": "P1 Phase: Decompose work into tasks and estimate effort",
  "tools": {
    "enabled": ["terminal", "editor", "grep", "search"],
    "disabled": ["build", "debug", "deploy"]
  },
  "commands": {
    "suggested": [
      "apm task create 'Task Name' --type=<type> --effort=<hours>",
      "apm task list --work-item-id=<id>",
      "apm work-item add-dependency <id> --depends-on=<id>",
      "apm work-item list-dependencies <id>",
      "apm work-item validate <id>"
    ],
    "shortcuts": {
      "tc": "apm task create",
      "tl": "apm task list --work-item-id=",
      "dep": "apm work-item add-dependency",
      "val": "apm work-item validate"
    }
  },
  "checklist": [
    "Tasks created for each acceptance criterion",
    "Effort estimates ≤ limits (IMPLEMENTATION ≤ 4h)",
    "Dependencies mapped between tasks",
    "Risk mitigations planned",
    "Required task types present (FEATURE: DESIGN+IMPL+TEST+DOC)"
  ],
  "gateValidation": "apm work-item validate <id> --gate=P1",
  "agentDelegation": "planning-orch",
  "nextPhase": "I1 Implementation",
  "documentation": "docs/planning/task-breakdown/",
  "guidance": [
    "Break tasks into atomic units",
    "Respect time-boxing limits",
    "Map dependencies explicitly",
    "Plan for testing early",
    "Document sequencing rationale"
  ]
}
```

### 5.4 I1 Implementation Mode

**File**: `.cursor/modes/i1-implementation.json`
**Phase**: I1 Implementation (Build & Test)
**Gate**: Tests updated + code complete + docs updated + migrations

**Configuration**:
```json
{
  "name": "AIPM I1 Implementation",
  "description": "I1 Phase: Implement features with tests and documentation",
  "tools": {
    "enabled": ["terminal", "editor", "grep", "search", "build", "debug"],
    "disabled": ["deploy"]
  },
  "commands": {
    "suggested": [
      "apm task start <id>",
      "apm task show <id>",
      "apm context show --task-id=<id>",
      "pytest tests/ -v --cov=agentpm",
      "apm task complete <id> --evidence='Implementation details'",
      "apm learnings record --type=decision --content='Implementation approach'"
    ],
    "shortcuts": {
      "ts": "apm task start",
      "ctx": "apm context show --task-id=",
      "test": "pytest tests/ -v --cov=agentpm",
      "tc": "apm task complete"
    }
  },
  "checklist": [
    "Implementation complete (code follows patterns)",
    "Unit tests written (≥ 90% coverage)",
    "Integration tests added where applicable",
    "Documentation updated (docstrings, guides)",
    "Database migrations created if schema changed",
    "Code reviewed against quality standards"
  ],
  "gateValidation": "apm work-item validate <id> --gate=I1",
  "agentDelegation": "implementation-orch",
  "nextPhase": "R1 Review",
  "documentation": "docs/developer-guide/",
  "guidance": [
    "Follow three-layer architecture (Models → Adapters → Methods)",
    "Write tests before implementation (TDD)",
    "Use type hints throughout",
    "Handle errors with ServiceResult pattern",
    "Document decisions with evidence",
    "Run tests frequently during development"
  ],
  "patterns": [
    "Three-layer database pattern",
    "Service coordinator pattern",
    "Pydantic validation",
    "Click + Rich for CLI",
    "AAA test pattern"
  ]
}
```

### 5.5 R1 Review Mode

**File**: `.cursor/modes/r1-review.json`
**Phase**: R1 Review (Quality Validation)
**Gate**: AC verified + tests pass + quality checks + code review

**Configuration**:
```json
{
  "name": "AIPM R1 Review",
  "description": "R1 Phase: Validate quality and verify acceptance criteria",
  "tools": {
    "enabled": ["terminal", "editor", "grep", "search", "build"],
    "disabled": ["deploy"]
  },
  "commands": {
    "suggested": [
      "pytest tests/ -v --cov=agentpm --cov-report=html",
      "ruff check agentpm/",
      "black --check agentpm/",
      "apm work-item validate <id>",
      "apm task approve <id>",
      "apm task request-changes <id> --reason='Specific issue'"
    ],
    "shortcuts": {
      "test": "pytest tests/ -v --cov=agentpm",
      "lint": "ruff check agentpm/",
      "fmt": "black --check agentpm/",
      "val": "apm work-item validate",
      "approve": "apm task approve"
    }
  },
  "checklist": [
    "All acceptance criteria verified",
    "All tests passing (100% pass rate)",
    "Test coverage ≥ 90%",
    "Code quality checks passed (ruff, black)",
    "Documentation complete and accurate",
    "Security review completed",
    "Performance within acceptable limits",
    "Code review approved by different agent"
  ],
  "gateValidation": "apm work-item validate <id> --gate=R1",
  "agentDelegation": "review-test-orch",
  "nextPhase": "O1 Operations",
  "documentation": "docs/testing/test-results/",
  "guidance": [
    "Review code against acceptance criteria",
    "Run full test suite with coverage",
    "Check for security vulnerabilities",
    "Validate documentation completeness",
    "Different agent must approve (no self-review)",
    "Provide constructive feedback if changes needed"
  ],
  "qualityGates": [
    "CI-004: Testing quality (≥ 90% coverage)",
    "CI-006: Documentation standards",
    "Security scan: No critical vulnerabilities",
    "Performance: No regressions"
  ]
}
```

### 5.6 O1 Operations Mode

**File**: `.cursor/modes/o1-operations.json`
**Phase**: O1 Operations (Deploy & Monitor)
**Gate**: Version bumped + deployed + health checks + monitors

**Configuration**:
```json
{
  "name": "AIPM O1 Operations",
  "description": "O1 Phase: Deploy to production and monitor health",
  "tools": {
    "enabled": ["terminal", "editor", "deploy", "monitor"],
    "disabled": []
  },
  "commands": {
    "suggested": [
      "apm work-item show <id>",
      "git tag v<version>",
      "git push origin v<version>",
      "apm learnings record --type=deployment --content='Deployment notes'",
      "apm work-item validate <id>"
    ],
    "shortcuts": {
      "tag": "git tag v",
      "deploy": "git push origin v",
      "log": "apm learnings record --type=deployment",
      "val": "apm work-item validate"
    }
  },
  "checklist": [
    "Version number bumped (semantic versioning)",
    "Changelog updated with changes",
    "Deployment successful (no errors)",
    "Health checks passing",
    "Monitoring alerts configured",
    "Rollback plan documented",
    "Stakeholders notified"
  ],
  "gateValidation": "apm work-item validate <id> --gate=O1",
  "agentDelegation": "release-ops-orch",
  "nextPhase": "E1 Evolution",
  "documentation": "docs/operations/deployment/",
  "guidance": [
    "Follow semantic versioning (MAJOR.MINOR.PATCH)",
    "Test deployment in staging first",
    "Monitor logs during initial rollout",
    "Have rollback plan ready",
    "Document any deployment issues",
    "Capture lessons learned"
  ],
  "safetyChecks": [
    "Backup completed before deployment",
    "Rollback tested and verified",
    "Team notified of deployment window",
    "Monitoring dashboard active"
  ]
}
```

### 5.7 E1 Evolution Mode

**File**: `.cursor/modes/e1-evolution.json`
**Phase**: E1 Evolution (Continuous Improvement)
**Gate**: Telemetry analyzed + improvements identified + feedback captured

**Configuration**:
```json
{
  "name": "AIPM E1 Evolution",
  "description": "E1 Phase: Analyze telemetry and plan improvements",
  "tools": {
    "enabled": ["terminal", "editor", "grep", "search", "monitor"],
    "disabled": []
  },
  "commands": {
    "suggested": [
      "apm learnings list --recent",
      "apm learnings record --type=pattern --content='Pattern discovered'",
      "apm idea create 'Improvement idea' --type=enhancement",
      "apm idea analyze <id> --comprehensive",
      "apm work-item create 'Improvement' --type=enhancement"
    ],
    "shortcuts": {
      "learn": "apm learnings list --recent",
      "pattern": "apm learnings record --type=pattern",
      "idea": "apm idea create",
      "analyze": "apm idea analyze"
    }
  },
  "checklist": [
    "Production metrics analyzed",
    "User feedback collected and reviewed",
    "Performance patterns identified",
    "Improvement opportunities documented",
    "Technical debt cataloged",
    "Enhancement ideas created",
    "Lessons learned recorded"
  ],
  "gateValidation": "apm work-item validate <id> --gate=E1",
  "agentDelegation": "evolution-orch",
  "nextPhase": "D1 Discovery (for new improvements)",
  "documentation": "docs/communication/retrospective/",
  "guidance": [
    "Review production metrics regularly",
    "Capture user feedback systematically",
    "Identify patterns in issues and successes",
    "Document technical debt explicitly",
    "Prioritize improvements by impact",
    "Link improvements to business value"
  ],
  "analysisAreas": [
    "Performance trends",
    "Error rates and patterns",
    "User satisfaction metrics",
    "Technical debt accumulation",
    "Security vulnerabilities discovered",
    "Team velocity and blockers"
  ]
}
```

---

## 6. Command Usage Matrix

### 6.1 Command Patterns by Phase

| Phase | Primary Commands | Gate Validation | Documentation |
|-------|-----------------|-----------------|---------------|
| **D1 Discovery** | `apm work-item show <id>`<br>`apm context show --work-item-id=<id>`<br>`apm idea analyze <id>`<br>`apm learnings list` | `apm work-item validate <id>` | `docs/planning/requirements/` |
| **P1 Planning** | `apm task create`<br>`apm task list`<br>`apm work-item add-dependency`<br>`apm work-item list-dependencies` | `apm work-item validate <id>` | `docs/planning/task-breakdown/` |
| **I1 Implementation** | `apm task start <id>`<br>`apm context show --task-id=<id>`<br>`pytest tests/ -v --cov`<br>`apm task complete <id>` | `pytest` + `apm work-item validate <id>` | `docs/developer-guide/` |
| **R1 Review** | `pytest --cov-report=html`<br>`ruff check`<br>`black --check`<br>`apm task approve <id>` | `apm work-item validate <id>` | `docs/testing/test-results/` |
| **O1 Operations** | `git tag v<version>`<br>`git push origin v<version>`<br>`apm learnings record --type=deployment` | Health checks + monitoring | `docs/operations/deployment/` |
| **E1 Evolution** | `apm learnings list --recent`<br>`apm learnings record --type=pattern`<br>`apm idea create` | Metrics review | `docs/communication/retrospective/` |

### 6.2 Common Operations Across Phases

| Operation | Command Pattern | When to Use |
|-----------|----------------|-------------|
| **Get Context** | `apm context show --work-item-id=<id>`<br>`apm context show --task-id=<id>` | Before starting any work |
| **Check Status** | `apm status`<br>`apm work-item list`<br>`apm task list` | Session start, progress check |
| **Validate Quality** | `apm work-item validate <id>`<br>`pytest --cov=agentpm` | Before phase transitions |
| **Record Decision** | `apm learnings record --type=decision --content='...'` | After significant decisions |
| **Check Rules** | `apm rules list`<br>`apm rules show <rule-id>` | When unsure of requirements |
| **View Dependencies** | `apm work-item list-dependencies <id>` | Before starting work |

### 6.3 Error Recovery Patterns

| Error Pattern | Diagnostic Command | Recovery Action |
|---------------|-------------------|----------------|
| **Gate validation failed** | `apm work-item show <id>` | Check missing criteria, complete requirements |
| **Test failure** | `pytest tests/ -v --tb=short` | Fix failing tests, ensure coverage |
| **Context confidence low** | `apm context show --task-id=<id>` | Enrich context, add evidence |
| **Database error** | `apm status` | Check database integrity, review migrations |
| **CLI error** | `apm <command> --help` | Review command syntax, check parameters |

---

## 7. Integration Patterns

### 7.1 Rule Loading Sequence

```
1. Cursor starts
2. Load: aipm-master.mdc (ALWAYS)
3. User opens file(s)
4. Auto-attach based on glob patterns:
   - **/*.py → python-implementation.mdc
   - tests/**/*.py → testing-standards.mdc
   - agentpm/cli/**/*.py → cli-development.mdc
   - **/adapters/**/*.py → database-patterns.mdc
   - docs/**/*.md → documentation-quality.mdc
5. User selects custom mode (optional):
   - D1/P1/I1/R1/O1/E1 → Mode-specific guidance
```

### 7.2 Context-Aware Suggestions

**Example: Editing Python file in adapters/**

```
Active Rules:
  ├─ aipm-master.mdc (always)
  ├─ python-implementation.mdc (triggered by *.py)
  └─ database-patterns.mdc (triggered by **/adapters/**)

Suggestions:
  - Follow three-layer pattern (Models → Adapters → Methods)
  - Use Pydantic models for validation
  - Implement to_dict() and from_row() methods
  - Add type hints to all methods

Commands:
  - `apm context show --task-id=<id>` (get implementation context)
  - `pytest tests/adapters/ -v` (run adapter tests)
```

**Example: Writing tests in tests/**

```
Active Rules:
  ├─ aipm-master.mdc (always)
  ├─ python-implementation.mdc (triggered by *.py)
  └─ testing-standards.mdc (triggered by tests/**/*.py)

Suggestions:
  - Use Arrange-Act-Assert pattern
  - Descriptive test names (test_<operation>_<condition>)
  - Pytest fixtures for setup
  - Aim for ≥ 90% coverage

Commands:
  - `pytest tests/ -v --cov=agentpm` (run with coverage)
  - `apm task complete <id> --evidence='Test results'`
```

### 7.3 Mode-Based Workflows

**Example: Starting Implementation Phase**

```
User Action: Select "I1 Implementation" mode

Cursor Behavior:
  1. Load I1 mode configuration
  2. Activate implementation-specific tools (build, debug)
  3. Show I1 checklist in sidebar
  4. Suggest starting command: `apm task start <id>`
  5. Display next gate: R1 Review

Guidance:
  - Focus on implementing acceptance criteria
  - Write tests alongside code (TDD)
  - Follow three-layer architecture
  - Document decisions with evidence
  - Run tests frequently
```

### 7.4 Database-First Command Patterns

**All state queries use `apm` commands:**

```bash
# ✅ CORRECT: Database-first
apm rules list                    # Query rules table
apm work-item show <id>          # Query work_items table
apm context show --task-id=<id>  # Assemble from database
apm status                        # Dashboard from database

# ❌ INCORRECT: File-based
cat .agentpm/config.yaml            # Static file, may be stale
grep -r "rule:" _RULES/          # Documentation only
cat docs/status.md               # Manual documentation
```

**Why Database-First:**
- Single source of truth
- Real-time state
- Enforced consistency
- Audit trail
- Multi-agent coordination

---

## 8. Conditional Logic & Intelligence

### 8.1 Smart Suggestions

**Context-Aware Command Suggestions:**

```python
# Pseudocode for Cursor AI logic
if current_file.matches("**/*.py"):
    suggest(["apm context show --task-id=<id>"])

if current_file.matches("tests/**/*.py"):
    suggest(["pytest tests/ -v --cov=agentpm"])

if active_mode == "I1 Implementation":
    suggest([
        "apm task start <id>",
        "apm context show --task-id=<id>",
        "pytest tests/ -v"
    ])

if error_detected("ValidationError"):
    suggest([
        "apm work-item validate <id>",
        "apm work-item show <id>"
    ])
```

### 8.2 Gate Validation Triggers

**Automatic validation before state transitions:**

```
Before: apm task submit-review <id>
  1. Check: pytest exit code == 0
  2. Check: coverage ≥ 90%
  3. Check: ruff exit code == 0
  4. Suggest: apm work-item validate <id>

Before: apm work-item next <id> (I1 → R1)
  1. Check: All IMPLEMENTATION tasks complete
  2. Check: All TESTING tasks complete
  3. Check: Documentation updated
  4. Suggest: Run validation before advancing
```

### 8.3 Error Pattern Recognition

**Common error signatures and recovery:**

```yaml
Error: "Task validation failed: effort exceeds limit"
Pattern: Effort > 4h for IMPLEMENTATION
Suggest:
  - "Break task into smaller units (≤ 4h each)"
  - "apm task create 'Subtask 1' --effort=3"
  - "apm task create 'Subtask 2' --effort=3"

Error: "Gate validation failed: missing acceptance criteria"
Pattern: AC count < 3
Suggest:
  - "Add acceptance criteria: apm work-item update <id>"
  - "Review definition gate requirements"
  - "Delegate to definition-orch for enrichment"

Error: "Test coverage below threshold: 85%"
Pattern: Coverage < 90%
Suggest:
  - "Add tests for uncovered code paths"
  - "pytest --cov=agentpm --cov-report=html"
  - "Review coverage report in htmlcov/index.html"
```

---

## 9. Migration Strategy

### 9.1 Phase 1: Create Consolidated Files

**Steps**:
1. Create `aipm-master.mdc` with core orchestration
2. Create 5 auto-attach rules from existing content
3. Create 6 custom mode JSON files
4. Test rule loading and auto-attach triggers

**Validation**:
- Master rule loads successfully
- Auto-attach triggers on correct file patterns
- Custom modes activate and display correctly

### 9.2 Phase 2: Deprecate Old Files

**Steps**:
1. Rename old files: `*.mdc` → `*.mdc.deprecated`
2. Add deprecation notice at top of each file
3. Test that no old rules load
4. Monitor for missing functionality

**Deprecation Notice Template**:
```markdown
---
DEPRECATED: This rule has been consolidated into:
  - aipm-master.mdc (core orchestration)
  - python-implementation.mdc (Python patterns)
Date: 2025-10-20
See: docs/architecture/cursor-integration-consolidation-design.md
---
```

### 9.3 Phase 3: Cleanup & Documentation

**Steps**:
1. Delete `.deprecated` files after 2 weeks
2. Update documentation references
3. Train team on new structure
4. Gather feedback and iterate

**Documentation Updates**:
- Update `docs/developer-guide/cursor-integration.md`
- Create quick-start guide for custom modes
- Document rule precedence and conflicts
- Publish examples of common workflows

---

## 10. Testing & Validation

### 10.1 Rule Load Testing

**Test Cases**:
```python
def test_master_rule_always_loads():
    """Master rule loads on Cursor start"""
    assert cursor.loaded_rules.contains("aipm-master.mdc")

def test_python_rule_auto_attaches():
    """Python rule activates when editing .py files"""
    cursor.open_file("agentpm/services/test.py")
    assert cursor.loaded_rules.contains("python-implementation.mdc")

def test_multiple_rules_stack():
    """Multiple rules can be active simultaneously"""
    cursor.open_file("agentpm/adapters/project_adapter.py")
    assert cursor.loaded_rules.contains("python-implementation.mdc")
    assert cursor.loaded_rules.contains("database-patterns.mdc")
```

### 10.2 Mode Activation Testing

**Test Cases**:
```python
def test_mode_loads_configuration():
    """Custom mode loads tool and command config"""
    cursor.activate_mode("i1-implementation")
    assert cursor.mode.tools.enabled.contains("build")
    assert cursor.mode.commands.shortcuts["tc"] == "apm task complete"

def test_mode_displays_checklist():
    """Mode checklist appears in sidebar"""
    cursor.activate_mode("r1-review")
    assert cursor.sidebar.checklist.visible
    assert "All acceptance criteria verified" in cursor.sidebar.checklist.items
```

### 10.3 Command Suggestion Testing

**Test Cases**:
```python
def test_context_aware_suggestions():
    """Commands suggested based on file context"""
    cursor.open_file("tests/test_service.py")
    suggestions = cursor.get_command_suggestions()
    assert "pytest tests/ -v --cov=agentpm" in suggestions

def test_mode_based_suggestions():
    """Commands suggested based on active mode"""
    cursor.activate_mode("d1-discovery")
    suggestions = cursor.get_command_suggestions()
    assert "apm work-item validate <id>" in suggestions
```

---

## 11. Acceptance Criteria Mapping

| Criterion | Implementation | Validation |
|-----------|---------------|------------|
| **AC1: Rule consolidation architecture documented** | This design document | ✅ Complete |
| **AC2: 1 master + 5 auto-attach rule specs defined** | Sections 3 & 4 | ✅ Complete |
| **AC3: 6 custom mode specifications created** | Section 5 | ✅ Complete |
| **AC4: `apm` command usage matrix by phase** | Section 6 | ✅ Complete |
| **AC5: Integration design with conditional logic** | Section 8 | ✅ Complete |
| **AC6: Design reduces cognitive load** | 22 files → 6 active rules | ✅ Complete |
| **AC7: Database-first pattern throughout** | Section 8.4, all command examples | ✅ Complete |

---

## 12. Risk Analysis & Mitigations

| Risk | Impact | Probability | Mitigation |
|------|--------|-------------|------------|
| **Rule conflicts** | Medium | Low | Master rule has highest priority (100), clear precedence |
| **Auto-attach false positives** | Low | Medium | Test glob patterns thoroughly, use specific patterns |
| **Mode confusion** | Medium | Low | Clear mode descriptions, visual indicators in UI |
| **Missing functionality** | High | Low | Gradual migration with deprecation period, feedback loop |
| **Performance degradation** | Low | Low | Master rule ≤ 15KB, auto-attach rules ≤ 10KB each |
| **User adoption resistance** | Medium | Medium | Training, documentation, clear benefits communication |

---

## 13. Success Metrics

### 13.1 Quantitative Metrics

| Metric | Baseline | Target | Measurement |
|--------|----------|--------|-------------|
| **Active rule count** | 22 files | 6 rules | File count in `.cursor/rules/` |
| **Average rule size** | ~7KB | ≤ 10KB | File size analysis |
| **Rule load time** | Unknown | < 200ms | Performance profiling |
| **Mode activation time** | N/A | < 100ms | User experience testing |
| **Command suggestion accuracy** | N/A | > 90% | User feedback survey |

### 13.2 Qualitative Metrics

- **Cognitive Load**: User survey on ease of understanding (1-5 scale)
- **Workflow Efficiency**: Time to complete common tasks
- **Error Recovery**: Success rate of suggested recovery actions
- **User Satisfaction**: Overall satisfaction with Cursor integration (1-5 scale)

### 13.3 Success Criteria

✅ **Success**:
- All 22 rules consolidated into 6 active files
- All 6 custom modes operational
- Command suggestions > 90% accurate
- User satisfaction ≥ 4/5

---

## 14. Future Enhancements

### 14.1 Short-Term (Next 3 Months)

1. **AI-Powered Suggestions**: Use AI to suggest next commands based on context
2. **Telemetry Integration**: Track command usage patterns to improve suggestions
3. **Smart Gate Warnings**: Proactive warnings before gate validation failures
4. **Quick Actions**: One-click command execution from suggestions

### 14.2 Long-Term (6-12 Months)

1. **Adaptive Modes**: Modes learn from user behavior and adapt suggestions
2. **Cross-Project Learning**: Share patterns across APM (Agent Project Manager) projects
3. **Voice Commands**: Natural language interface for `apm` commands
4. **Visual Workflow Editor**: GUI for managing work items and tasks

---

## 15. Documentation & Training

### 15.1 Required Documentation

1. **Quick Start Guide**:
   - File: `docs/user-guides/cursor-integration-quickstart.md`
   - Content: Rule overview, mode activation, common commands

2. **Mode Reference**:
   - File: `docs/reference/cursor-modes-reference.md`
   - Content: Detailed mode specifications, checklists, commands

3. **Rule Reference**:
   - File: `docs/reference/cursor-rules-reference.md`
   - Content: Master rule + auto-attach rules, precedence, conflicts

4. **Migration Guide**:
   - File: `docs/operations/cursor-migration-guide.md`
   - Content: How to transition from old rules, troubleshooting

### 15.2 Training Materials

1. **Video Tutorial**: Walkthrough of new structure and modes
2. **Interactive Demo**: Hands-on practice with custom modes
3. **FAQ Document**: Common questions and answers
4. **Troubleshooting Guide**: Error patterns and solutions

---

## 16. Appendices

### 16.1 File Size Analysis

| File | Size (KB) | % of Total |
|------|-----------|------------|
| **Old Structure** | | |
| All 22 rules | ~154 KB | 100% |
| Average per file | 7 KB | - |
| **New Structure** | | |
| aipm-master.mdc | 15 KB | 28% |
| 5 auto-attach rules | 36 KB (7.2 avg) | 67% |
| 6 custom modes | 3 KB (0.5 avg) | 6% |
| **Total** | 54 KB | 35% of old |

**Space Savings**: 65% reduction (154 KB → 54 KB)

### 16.2 Glob Pattern Reference

```yaml
# Auto-attach patterns
python-implementation.mdc:
  - "**/*.py"
  - "!tests/**/*.py"

testing-standards.mdc:
  - "tests/**/*.py"
  - "**/*_test.py"
  - "**/test_*.py"

cli-development.mdc:
  - "agentpm/cli/**/*.py"
  - "agentpm/commands/**/*.py"

database-patterns.mdc:
  - "**/adapters/**/*.py"
  - "**/methods/**/*.py"
  - "**/database/**/*.py"
  - "**/models/**/*.py"

documentation-quality.mdc:
  - "docs/**/*.md"
  - "*.md"
```

### 16.3 Command Quick Reference

```bash
# Session Start
apm status
apm work-item list
apm context show --work-item-id=<id>

# D1 Discovery
apm idea analyze <id> --comprehensive
apm work-item validate <id>

# P1 Planning
apm task create 'Task' --type=implementation --effort=4
apm work-item add-dependency <id> --depends-on=<id>

# I1 Implementation
apm task start <id>
apm context show --task-id=<id>
pytest tests/ -v --cov=agentpm

# R1 Review
pytest --cov-report=html
ruff check agentpm/
apm task approve <id>

# O1 Operations
git tag v<version>
apm learnings record --type=deployment

# E1 Evolution
apm learnings list --recent
apm idea create 'Improvement' --type=enhancement
```

---

## 17. Approval & Sign-Off

**Design Phase**: ✅ Complete (3 hours estimated)

**Next Phase**: P1 Planning (Implementation Task Breakdown)

**Design Approved By**:
- [ ] Technical Lead
- [ ] Product Owner
- [ ] DevOps Lead

**Date**: 2025-10-20

**Version**: 1.0.0

---

**Document Path**: `docs/architecture/cursor-integration-consolidation-design.md`
**Related Work Items**: WI-118, WI-114, WI-116, WI-107
**Related Documents**:
- `docs/architecture/claude-integration-consolidation-design.md`
- `docs/developer-guide/cursor-integration.md`
- `.cursor/rules/aipm-master.mdc` (to be created in P1)

---

*End of Design Specification*
