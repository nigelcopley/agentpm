# Document Content Management User Guide

Complete guide to using APM (Agent Project Manager)'s hybrid document storage system with database-backed content and filesystem synchronization.

---

## Table of Contents

1. [Overview](#overview)
2. [Hybrid Storage Concept](#hybrid-storage-concept)
3. [Creating Documents with Content](#creating-documents-with-content)
4. [Searching Document Content](#searching-document-content)
5. [Syncing Documents](#syncing-documents)
6. [Best Practices](#best-practices)
7. [Command Reference](#command-reference)
8. [Troubleshooting](#troubleshooting)

---

## Overview

### What is Hybrid Document Storage?

APM (Agent Project Manager)'s hybrid document storage system combines the best of both worlds:

- **Database as Source of Truth**: Full document content stored in SQLite database
- **Files as Cache**: Synchronized filesystem copies for git diffs and IDE editing
- **Automatic Sync**: Bidirectional synchronization keeps both in sync
- **Full-Text Search**: FTS5-powered search across all document content
- **Conflict Resolution**: Smart handling of concurrent modifications

### Why Hybrid Storage?

Traditional documentation systems force you to choose:

| Approach | Pros | Cons |
|----------|------|------|
| **Files Only** | Git-friendly, IDE editing | No single source of truth, hard to search |
| **Database Only** | Single source, fast search | No git diffs, poor IDE support |
| **Hybrid** | Best of both worlds | Sync complexity (handled automatically) |

APM (Agent Project Manager) implements hybrid storage to give you:

- ✅ Single source of truth (database)
- ✅ Git-friendly diffs (filesystem)
- ✅ IDE editing support (filesystem)
- ✅ Fast full-text search (FTS5 indexes)
- ✅ Automatic synchronization (both directions)

---

## Hybrid Storage Concept

### Architecture Overview

```
┌─────────────────────────────────────────────────────────────┐
│                     AIPM Document System                     │
├─────────────────────────────────────────────────────────────┤
│                                                              │
│  ┌──────────────────────┐         ┌──────────────────────┐ │
│  │   SQLite Database    │◄───────►│   Filesystem Cache   │ │
│  │  (Source of Truth)   │  Sync   │   (Git + IDE)        │ │
│  ├──────────────────────┤         ├──────────────────────┤ │
│  │ • Full content       │         │ • docs/ directory    │ │
│  │ • Metadata           │         │ • Git-trackable      │ │
│  │ • FTS5 indexes       │         │ • IDE-editable       │ │
│  │ • Content hash       │         │ • Regenerable        │ │
│  └──────────────────────┘         └──────────────────────┘ │
│                                                              │
└─────────────────────────────────────────────────────────────┘
```

### Key Principles

1. **Database is Authoritative**: Database content wins in conflicts (by default)
2. **Files are Regenerable**: Files can be safely deleted and regenerated from database
3. **Automatic Sync**: Changes propagate automatically on save
4. **Content Integrity**: SHA-256 hashes detect changes and prevent corruption
5. **Conflict Detection**: Smart detection of concurrent modifications

### Data Flow

**Creating a Document**:
```
1. User creates document → 2. Content saved to DB → 3. File synced to filesystem
```

**Editing in IDE**:
```
1. User edits file → 2. Sync detects change → 3. Content updated in DB → 4. FTS5 reindexed
```

**Searching Content**:
```
1. User searches → 2. FTS5 query runs → 3. Results ranked by relevance → 4. Snippets returned
```

---

## Creating Documents with Content

### Basic Document Creation

Create a document with content stored in both database and filesystem:

```bash
apm document add \
  --entity-type=work_item \
  --entity-id=133 \
  --file-path="docs/architecture/design/hybrid-storage.md" \
  --type=design \
  --title="Hybrid Document Storage Design" \
  --content="# Hybrid Storage\n\nComplete design for database-backed content..."
```

**What Happens**:
1. Content stored in `document_references.content` field (database)
2. SHA-256 hash computed and stored for integrity
3. File written to `docs/architecture/design/hybrid-storage.md`
4. FTS5 index updated for full-text search
5. Metadata tracked (size, hash, timestamps)

### Creating from Existing File

Import an existing file into the database:

```bash
apm document add \
  --entity-type=work_item \
  --entity-id=133 \
  --file-path="docs/architecture/design/existing-doc.md" \
  --type=design \
  --import-content
```

**What Happens**:
1. File content read from filesystem
2. Content stored in database
3. Hash computed from file content
4. Metadata auto-detected (size, format)
5. FTS5 index updated

### Creating with Rich Metadata

Add comprehensive metadata for better discoverability:

```bash
apm document add \
  --entity-type=work_item \
  --entity-id=133 \
  --file-path="docs/architecture/design/auth-system.md" \
  --type=design \
  --title="Authentication System Design" \
  --description="Complete technical design for OAuth2-based authentication" \
  --content-file="auth-design-draft.md" \
  --component="authentication" \
  --domain="security" \
  --audience="developer" \
  --maturity="draft" \
  --tags="oauth2,jwt,security,authentication"
```

**Metadata Benefits**:
- **component**: Group related documents (`authentication`, `payment`, etc.)
- **domain**: Technical domain (`security`, `performance`, etc.)
- **audience**: Target readers (`developer`, `user`, `admin`, `stakeholder`)
- **maturity**: Lifecycle state (`draft`, `review`, `approved`, `deprecated`)
- **tags**: Flexible categorization for search

---

## Searching Document Content

### Full-Text Search with FTS5

Search across all document content using SQLite FTS5:

```bash
# Basic content search
apm document search "authentication OAuth2"

# Search with filters
apm document search "database schema" \
  --type=design \
  --component=authentication

# Search with maturity filter
apm document search "API endpoints" \
  --maturity=approved \
  --audience=developer
```

**Search Features**:
- **Phrase Matching**: Use quotes for exact phrases: `"hybrid storage"`
- **Boolean Operators**: Combine terms: `authentication AND oauth2`
- **Wildcards**: Partial matching: `auth*` matches "authentication", "authorization"
- **Ranking**: Results ranked by relevance (BM25 algorithm)
- **Snippets**: Context snippets showing matched text

### Search Examples

**Find all authentication-related documents**:
```bash
apm document search "authentication" --component=authentication
```

**Find draft design documents**:
```bash
apm document search "design" --type=design --maturity=draft
```

**Find documents mentioning specific technologies**:
```bash
apm document search "SQLite FTS5 full-text search"
```

**Search with context snippets**:
```bash
apm document search "conflict resolution" --show-snippets
```

**Example Output**:
```
Found 3 document(s) matching "conflict resolution"

┌────┬─────────────────────────────────────┬─────────────────────────────┐
│ ID │ Title                               │ Snippet                      │
├────┼─────────────────────────────────────┼─────────────────────────────┤
│ 42 │ Hybrid Document Storage Design      │ ...smart conflict           │
│    │                                     │ resolution strategy ensures  │
│    │                                     │ data integrity...            │
├────┼─────────────────────────────────────┼─────────────────────────────┤
│ 38 │ Database Sync Algorithm             │ ...bidirectional conflict   │
│    │                                     │ resolution with database as  │
│    │                                     │ authoritative source...      │
└────┴─────────────────────────────────────┴─────────────────────────────┘
```

---

## Syncing Documents

### Automatic Synchronization

APM (Agent Project Manager) automatically syncs documents bidirectionally:

**Database → Filesystem (On Create/Update)**:
```bash
# Content automatically written to file
apm document update 42 --content="# Updated Design\n\nNew approach..."
# File docs/architecture/design/hybrid-storage.md updated automatically
```

**Filesystem → Database (On Sync)**:
```bash
# Edit file in IDE: docs/architecture/design/hybrid-storage.md
# Then sync changes back to database
apm document sync --file-path="docs/architecture/design/hybrid-storage.md"
```

### Manual Sync Commands

**Sync single document from filesystem**:
```bash
apm document sync --file-path="docs/architecture/design/auth-system.md"
```

**Sync all documents**:
```bash
apm document sync --all
```

**Sync with conflict resolution**:
```bash
# Default: Database wins (--strategy=db-wins)
apm document sync --file-path="docs/architecture/design/auth-system.md"

# File wins (overwrite database)
apm document sync --file-path="docs/architecture/design/auth-system.md" --strategy=file-wins

# Manual resolution (prompt user)
apm document sync --file-path="docs/architecture/design/auth-system.md" --strategy=manual
```

### Sync Strategies

| Strategy | Behavior | Use Case |
|----------|----------|----------|
| `db-wins` (default) | Database content overwrites file | Database is authoritative |
| `file-wins` | File content overwrites database | IDE edits should win |
| `manual` | Prompt user to choose | Review both versions |
| `merge` | Attempt automatic merge | Both sources have valid changes |

### Conflict Detection

APM (Agent Project Manager) detects conflicts using content hashes:

```bash
# Conflict scenario:
# 1. Database has content with hash: abc123
# 2. File modified externally with different content
# 3. Sync command detects hash mismatch

apm document sync --file-path="docs/architecture/design/auth-system.md"

# Output:
# ⚠️  Conflict detected!
#
# Database content (modified 2025-10-20 10:30):
#   Hash: abc123def456
#   Size: 4.2 KB
#
# File content (modified 2025-10-20 10:45):
#   Hash: 789ghi012jkl
#   Size: 4.5 KB
#
# Choose resolution strategy:
#   1. Database wins (discard file changes)
#   2. File wins (overwrite database)
#   3. Show diff (review changes)
#   4. Manual merge (edit in IDE)
#
# Selection [1-4]:
```

### Regenerating Files

If files are deleted or corrupted, regenerate from database:

```bash
# Regenerate single file
apm document regenerate --file-path="docs/architecture/design/auth-system.md"

# Regenerate all files
apm document regenerate --all

# Verify after regeneration
apm document verify --all
```

**Verification Output**:
```
Verifying document integrity...

✓ docs/architecture/design/auth-system.md (hash match)
✓ docs/architecture/design/database-schema.md (hash match)
✗ docs/planning/requirements/auth-requirements.md (hash mismatch - file modified)

Summary:
  Verified: 45
  Mismatches: 1
  Missing: 0
```

---

## Best Practices

### 1. Use Database as Source of Truth

**Do**:
```bash
# Update content via CLI (updates both DB and file)
apm document update 42 --content-file="updated-design.md"
```

**Don't**:
```bash
# Edit file directly without syncing
vim docs/architecture/design/auth-system.md
# (Changes not in database yet - run sync!)
```

### 2. Sync After External Edits

Always sync after editing files in IDE:

```bash
# Edit in IDE
code docs/architecture/design/auth-system.md

# Sync changes to database
apm document sync --file-path="docs/architecture/design/auth-system.md"
```

### 3. Use Rich Metadata

Maximize discoverability with comprehensive metadata:

```bash
apm document add \
  --file-path="docs/architecture/design/payment-integration.md" \
  --type=design \
  --component="payment" \
  --domain="business-logic" \
  --audience="developer,stakeholder" \
  --maturity="review" \
  --priority="high" \
  --tags="stripe,payment,integration,security"
```

### 4. Regular Verification

Periodically verify document integrity:

```bash
# Weekly verification
apm document verify --all

# Fix any mismatches
apm document sync --all --strategy=db-wins
```

### 5. Leverage Full-Text Search

Use FTS5 search instead of grep:

**Better**:
```bash
apm document search "OAuth2 authentication flow"
```

**Worse**:
```bash
grep -r "OAuth2" docs/
```

**Why**: FTS5 provides:
- Relevance ranking
- Snippet highlighting
- Metadata filtering
- Faster performance on large codebases

### 6. Document Lifecycle Management

Track document maturity through lifecycle:

```bash
# Create draft
apm document add --maturity=draft ...

# Move to review
apm document update 42 --maturity=review

# Approve
apm document update 42 --maturity=approved

# Deprecate old version
apm document update 38 --maturity=deprecated
```

---

## Command Reference

### Document Creation

```bash
# Add with inline content
apm document add \
  --entity-type=work_item \
  --entity-id=133 \
  --file-path="docs/architecture/design/doc.md" \
  --type=design \
  --content="# Content here"

# Add from file
apm document add \
  --file-path="docs/architecture/design/doc.md" \
  --type=design \
  --content-file="source.md"

# Import existing file
apm document add \
  --file-path="docs/architecture/design/existing.md" \
  --type=design \
  --import-content
```

### Document Search

```bash
# Basic search
apm document search "search terms"

# Filtered search
apm document search "terms" \
  --type=design \
  --component=authentication \
  --maturity=approved

# Search with snippets
apm document search "terms" --show-snippets
```

### Document Sync

```bash
# Sync single document
apm document sync --file-path="docs/path/to/doc.md"

# Sync all documents
apm document sync --all

# Sync with strategy
apm document sync --file-path="docs/path/to/doc.md" --strategy=file-wins
```

### Document Regeneration

```bash
# Regenerate from database
apm document regenerate --file-path="docs/path/to/doc.md"

# Regenerate all
apm document regenerate --all
```

### Document Verification

```bash
# Verify integrity
apm document verify --all

# Verify single document
apm document verify --file-path="docs/path/to/doc.md"
```

### Document Updates

```bash
# Update content
apm document update 42 --content="New content"

# Update from file
apm document update 42 --content-file="updated.md"

# Update metadata
apm document update 42 \
  --title="New Title" \
  --maturity=approved \
  --tags="new,tags"
```

---

## Troubleshooting

### Issue: Content Out of Sync

**Problem**: Database and file content differ

**Symptoms**:
```bash
apm document verify --all
# ✗ docs/architecture/design/auth.md (hash mismatch)
```

**Solution**:
```bash
# Check which is newer
apm document show 42

# Sync with appropriate strategy
apm document sync --file-path="docs/architecture/design/auth.md" --strategy=db-wins
# Or: --strategy=file-wins (if file has latest changes)
```

### Issue: File Missing

**Problem**: File deleted but database reference exists

**Solution**:
```bash
# Regenerate from database
apm document regenerate --file-path="docs/architecture/design/missing.md"

# Verify restoration
ls -la docs/architecture/design/missing.md
```

### Issue: Search Not Finding Content

**Problem**: FTS5 index out of date

**Solution**:
```bash
# Rebuild FTS5 indexes
apm document reindex --all

# Verify search works
apm document search "expected term"
```

### Issue: Conflict During Sync

**Problem**: Both database and file modified

**Symptoms**:
```bash
apm document sync --file-path="docs/architecture/design/doc.md"
# ⚠️  Conflict detected!
```

**Solution 1 - Database Wins**:
```bash
apm document sync --file-path="docs/architecture/design/doc.md" --strategy=db-wins
```

**Solution 2 - File Wins**:
```bash
apm document sync --file-path="docs/architecture/design/doc.md" --strategy=file-wins
```

**Solution 3 - Manual Review**:
```bash
# Show diff
apm document diff --file-path="docs/architecture/design/doc.md"

# Edit manually in IDE
code docs/architecture/design/doc.md

# Sync after manual resolution
apm document sync --file-path="docs/architecture/design/doc.md" --strategy=file-wins
```

### Issue: Large Documents Slow Performance

**Problem**: Very large documents (>1 MB) slow down sync

**Solution**:
```bash
# Check document sizes
apm document list --sort=size --order=desc

# Consider splitting large documents
apm document split --file-path="docs/large-doc.md" --strategy=by-section
```

### Issue: Hash Mismatch After Edit

**Problem**: Hash doesn't match after legitimate edit

**Solution**:
```bash
# This is expected! Sync to update hash
apm document sync --file-path="docs/architecture/design/doc.md" --strategy=file-wins

# Verify hash updated
apm document verify --file-path="docs/architecture/design/doc.md"
```

### Issue: Database Corruption

**Problem**: Database content corrupted or invalid

**Solution**:
```bash
# Restore from files (if files are authoritative)
apm document sync --all --strategy=file-wins --force

# Or restore from backup
cp .agentpm/backups/aipm-backup-YYYYMMDD.db .agentpm/data/agentpm.db
```

---

## Common Workflows

### Workflow 1: Creating New Design Document

```bash
# 1. Create document with initial content
apm document add \
  --entity-type=work_item \
  --entity-id=133 \
  --file-path="docs/architecture/design/new-feature.md" \
  --type=design \
  --title="New Feature Design" \
  --maturity=draft \
  --content="# New Feature\n\n## Overview\nTBD"

# 2. Edit in IDE
code docs/architecture/design/new-feature.md

# 3. Sync changes back
apm document sync --file-path="docs/architecture/design/new-feature.md"

# 4. Promote to review
apm document update 42 --maturity=review

# 5. After approval
apm document update 42 --maturity=approved
```

### Workflow 2: Searching for Documentation

```bash
# 1. Search for topic
apm document search "authentication OAuth2"

# 2. Review results
apm document show 42

# 3. Open in IDE
apm document open 42
# Opens: docs/architecture/design/auth-system.md in default editor
```

### Workflow 3: Document Lifecycle Management

```bash
# Draft phase
apm document add --maturity=draft ...

# Review phase
apm document update 42 --maturity=review
apm document review 42 --reviewer="senior-architect"

# Approved phase
apm document update 42 --maturity=approved

# Deprecation
apm document update 38 --maturity=deprecated --replacement-doc=42
```

---

## Next Steps

- **Developer Guide**: See `docs/guides/developer/document-storage-architecture.md` for technical details
- **Migration Guide**: See `docs/guides/user_guide/document-management.md` for path structure
- **ADR**: See `docs/planning/adr/ADR-015-hybrid-document-storage.md` for architectural decisions
- **API Reference**: See database schema in `docs/reference/api_doc/document-api.md`

---

**Version**: 1.0.0
**Last Updated**: 2025-10-21
**Related**: WI-133 (Hybrid Document Storage System)
**Status**: Draft (pending implementation)
