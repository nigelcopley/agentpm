# Week 1 Implementation Plan - Critical Stabilization

**Sprint Duration**: 5 days (Mon-Fri)
**Total Effort**: 40 hours (8h/day)
**Goal**: Fix all critical issues, make system production-safe
**Team**: 1 engineer (or 2 engineers @ 20h each)

---

## 🎯 **Sprint Goals**

### **Primary Objectives**
1. ✅ Fix all 🔴 HIGH priority issues (10 issues)
2. ✅ Integrate phase gate validation
3. ✅ Enable 6W intelligence for active work items
4. ✅ Update documentation to reflect reality
5. ✅ Achieve production-safe status

### **Success Criteria**
- [ ] All critical issues resolved
- [ ] Phase gates enforced in workflow
- [ ] 12 active work items have 6W contexts
- [ ] Documentation accuracy ≥90%
- [ ] All tests passing (1,962+)
- [ ] Zero memory leaks
- [ ] Database health score ≥80/100

---

## 📅 **Day-by-Day Breakdown**

### **Monday: Database & Schema Fixes** (8 hours)

#### **Morning** (4 hours)

**Task 1.1: Create Migration 0023** (2 hours)
```yaml
File: agentpm/core/database/migrations/files/migration_0023.py
Purpose: Fix event type mismatch + add phase index

Changes:
  1. Expand session_events.event_type CHECK constraint (40+ types)
  2. Add index on work_items.phase
  3. Add composite index on work_items(phase, status)
  4. Add CHECK constraint on work_items.phase (enum values)

SQL:
  - CREATE TABLE session_events_new with expanded constraint
  - CREATE INDEX idx_work_items_phase
  - CREATE INDEX idx_work_items_phase_status
  - ALTER TABLE work_items ADD CONSTRAINT (if SQLite supports)

Testing:
  - Verify event insertion with all 40+ types
  - Verify phase index improves query speed
  - Verify no data loss in migration

Deliverable: migration_0023.py file, all tests passing
```

**Task 1.2: Create Migration 0024** (2 hours)
```yaml
File: agentpm/core/database/migrations/files/migration_0024.py
Purpose: Add phase field to tasks table

Changes:
  1. Add tasks.phase column (TEXT, nullable)
  2. Populate from parent work_items.phase
  3. Add trigger to keep in sync
  4. Add index on tasks.phase

SQL:
  - ALTER TABLE tasks ADD COLUMN phase TEXT
  - UPDATE tasks SET phase = (SELECT phase FROM work_items...)
  - CREATE TRIGGER sync_task_phase_with_work_item
  - CREATE INDEX idx_tasks_phase

Testing:
  - Verify task phase matches work item phase
  - Verify trigger keeps values in sync
  - Verify index exists

Deliverable: migration_0024.py file, all tests passing
```

#### **Afternoon** (4 hours)

**Task 1.3: Fix EventBus Singleton** (2 hours)
```yaml
File: agentpm/core/sessions/event_bus.py
Purpose: Prevent thread accumulation (memory leak)

Changes:
  - Add singleton pattern with thread safety
  - Single worker thread per process
  - Proper shutdown mechanism

Code:
  class EventBus:
      _instance = None
      _lock = threading.Lock()

      def __new__(cls, db_service):
          with cls._lock:
              if cls._instance is None:
                  cls._instance = super().__new__(cls)
                  cls._instance._initialize(db_service)
              return cls._instance

Testing:
  - Verify single instance across multiple calls
  - Verify single worker thread
  - Load test: 100 state transitions = 1 thread (not 100)

Deliverable: event_bus.py updated, memory leak eliminated
```

**Task 1.4: Run Migrations** (1 hour)
```bash
# Test migrations locally first
cd agentpm
python -c "from core.database.migrations import run_migrations; run_migrations('.agentpm/data/test.db')"

# Verify migrations work
sqlite3 .agentpm/data/test.db "SELECT * FROM schema_migrations ORDER BY version DESC LIMIT 3"

# Apply to production (with backup)
cp .agentpm/data/agentpm.db .agentpm/data/agentpm.db.backup.2025-10-16
apm migrate  # or manual migration runner

# Verify success
sqlite3 .agentpm/data/agentpm.db "SELECT version FROM schema_migrations ORDER BY version DESC LIMIT 1"
# Should show: 0024
```

**Task 1.5: Update Event Adapter** (1 hour)
```yaml
File: agentpm/core/database/adapters/event_adapter.py
Purpose: Remove lossy event type mapping

Changes:
  - Remove type collapsing logic
  - Pass through event_type directly
  - Verify all 40+ types now supported

Testing:
  - Create events of all 40+ types
  - Verify database accepts all types
  - Verify no "generic" mapping

Deliverable: event_adapter.py updated, full type fidelity
```

---

### **Tuesday: Phase-Status Integration** (8 hours)

#### **Morning** (4 hours)

**Task 2.1: Add Phase-Status Alignment Validation** (3 hours)
```yaml
File: agentpm/core/workflow/service.py
Purpose: Prevent nonsensical phase-status combinations

Changes:
  - Add _validate_phase_status_alignment() method
  - Define FORBIDDEN_COMBINATIONS set
  - Call from transition_work_item()

Code:
  FORBIDDEN_COMBINATIONS = {
      (WorkItemStatus.DONE, Phase.D1_DISCOVERY),
      (WorkItemStatus.DONE, Phase.P1_PLAN),
      (WorkItemStatus.ARCHIVED, Phase.D1_DISCOVERY),
      (WorkItemStatus.ARCHIVED, Phase.P1_PLAN),
      (WorkItemStatus.ARCHIVED, Phase.I1_IMPLEMENTATION),
      (WorkItemStatus.DRAFT, Phase.O1_OPERATIONS),
      (WorkItemStatus.DRAFT, Phase.E1_EVOLUTION),
  }

Testing:
  - tests-BAK/core/workflow/test_phase_status_alignment.py
  - Test all forbidden combinations raise WorkflowError
  - Test allowed combinations pass

Deliverable: service.py updated with validation
```

**Task 2.2: Decide Phase-Status Relationship** (1 hour)
```yaml
Decision: Choose between:
  A. Phase-Driven Status (phase advancement updates status)
  B. Status-Driven Phase (status change checks phase gates)
  C. Independent with Guards (both separate, validation prevents nonsense)

Recommendation: Option A (Phase-Driven Status)
  - Most aligned with PhaseValidator architecture
  - Single source of truth
  - No desynchronization possible

Document decision:
  - Create ADR-014: Phase-Status Relationship
  - File: docs/adrs/ADR-014-phase-status-relationship.md
  - Status: Accepted

Deliverable: ADR-014 documenting chosen approach
```

#### **Afternoon** (4 hours)

**Task 2.3: Create PhaseProgressionService** (3 hours)
```yaml
File: agentpm/core/workflow/phase_progression_service.py
Purpose: Manage phase transitions with gate validation

Methods:
  - advance_to_next_phase(work_item_id, validate_only) → PhaseTransitionResult
  - validate_current_gate(work_item_id) → GateResult
  - get_gate_status(work_item_id) → Dict
  - _get_gate_validator(phase) → GateValidator instance

Dependencies:
  - PhaseValidator (existing)
  - Gate validators (create in Task 2.4)
  - DatabaseService
  - WorkItem methods

Testing:
  - tests-BAK/core/workflow/test_phase_progression_service.py
  - Test advance for each phase type
  - Test validation without advancement
  - Test gate failures

Deliverable: phase_progression_service.py (335 LOC)
```

**Task 2.4: Create Base Gate Validator** (1 hour)
```yaml
File: agentpm/core/workflow/phase_gates/base_gate_validator.py
Purpose: Abstract base class for all gate validators

Interface:
  class BaseGateValidator(ABC):
      @abstractmethod
      def validate(work_item, db) → GateResult

      def _calculate_confidence(work_item, artifacts) → float

Testing:
  - Not directly (abstract class)
  - Tested via concrete implementations

Deliverable: base_gate_validator.py (80 LOC)
```

---

### **Wednesday: Phase Gate Validators** (8 hours)

**Full Day: Create 6 Phase Gate Validators** (6 hours)

**Task 3.1: D1 Gate Validator** (1 hour)
```yaml
File: agentpm/core/workflow/phase_gates/d1_gate_validator.py
Requirements:
  - business_context (≥50 chars)
  - acceptance_criteria (≥3)
  - risks (≥1 with mitigation)
  - six_w_context (confidence ≥0.70)

Testing:
  - tests-BAK/core/workflow/phase_gates/test_d1_gate.py
```

**Task 3.2: P1 Gate Validator** (1 hour)
```yaml
File: agentpm/core/workflow/phase_gates/p1_gate_validator.py
Requirements:
  - tasks_created (≥1)
  - effort_estimates (all tasks)
  - dependencies_mapped (DAG)
  - risk_mitigations (tasks for each risk)
```

**Task 3.3: I1 Gate Validator** (1 hour)
```yaml
File: agentpm/core/workflow/phase_gates/i1_gate_validator.py
Requirements:
  - all IMPLEMENTATION tasks DONE
  - all TESTING tasks DONE
  - all DOCUMENTATION tasks DONE
  - coverage meets thresholds
```

**Task 3.4: R1 Gate Validator** (1 hour)
```yaml
File: agentpm/core/workflow/phase_gates/r1_gate_validator.py
Requirements:
  - all ACs verified passing
  - 100% test pass rate
  - static analysis passing
  - code review approved
```

**Task 3.5: O1 Gate Validator** (1 hour)
```yaml
File: agentpm/core/workflow/phase_gates/o1_gate_validator.py
Requirements:
  - version bumped
  - deployed successfully
  - health checks passing
  - monitoring active
```

**Task 3.6: E1 Gate Validator** (1 hour)
```yaml
File: agentpm/core/workflow/phase_gates/e1_gate_validator.py
Requirements:
  - telemetry analyzed
  - improvements identified
  - feedback loop active
```

**Testing** (2 hours):
```yaml
- Create tests-BAK/core/workflow/phase_gates/ directory
- Test each gate validator independently
- Test with missing requirements
- Test with complete requirements
- Test confidence scoring

Total tests: ~30-40 (5-7 per gate validator)
```

---

### **Thursday: Workflow Integration** (8 hours)

#### **Morning** (4 hours)

**Task 4.1: Integrate PhaseGateValidator** (4 hours)
```yaml
File: agentpm/core/workflow/service.py
Purpose: Wire phase gate validation into transition pipeline

Changes:
  1. Import PhaseProgressionService
  2. Add phase_service instance variable
  3. Call phase validation in _validate_transition()
  4. Add phase gate check before status changes

Code Location: service.py:388-487 (_validate_transition method)

Add:
  # NEW: Step 5 - Phase gate validation
  if entity_type == EntityType.WORK_ITEM and entity and entity.phase:
      phase_result = self.phase_service.validate_current_gate(entity.id)
      if not phase_result.passed:
          return ValidationResult(
              valid=False,
              reason=f"Phase gate not passed: {phase_result.missing_requirements}"
          )

Testing:
  - tests-BAK/core/workflow/test_phase_gate_integration.py
  - Test transition blocked by phase gate
  - Test transition allowed after gate passes
  - Test all 6 gates in workflow

Deliverable: Phase gates now enforced in workflow
```

#### **Afternoon** (4 hours)

**Task 4.2: Add Phase CLI Commands** (4 hours)
```yaml
Files:
  - agentpm/cli/commands/work_item/phase_status.py
  - agentpm/cli/commands/work_item/phase_validate.py
  - agentpm/cli/commands/work_item/phase_advance.py

Commands:
  apm work-item phase-status <id>   # Show current phase + requirements
  apm work-item phase-validate <id> # Check if can advance
  apm work-item phase-advance <id>  # Advance to next phase

Implementation:
  Each command uses PhaseProgressionService
  Rich console formatting (tables, colors)
  Clear error messages with fix commands

Testing:
  - tests-BAK/cli/commands/test_work_item_phase_commands.py
  - Test each command with Click runner
  - Test error cases
  - Test successful advancement

Deliverable: 3 new CLI commands operational
```

---

### **Friday: Context Population & Documentation** (8 hours)

#### **Morning** (4 hours)

**Task 5.1: Populate Contexts for Active Work Items** (4 hours)
```yaml
Purpose: Enable 6W intelligence for 12 active work items

Script: scripts/populate_active_contexts.py

Process:
  1. Query 12 active work items
  2. For each work item:
     - Create UnifiedSixW structure
     - Extract WHO/WHAT/WHERE/WHEN/WHY/HOW from:
       - work_item.name, description, business_context
       - tasks (implementers, reviewers)
       - metadata (scope, artifacts)
     - Calculate confidence score
     - INSERT into contexts table
  3. Verify contexts created
  4. Test context assembly

Code:
  from agentpm.core.context import UnifiedSixW
  from agentpm.core.database.methods import contexts

  for wi in active_work_items:
      six_w = UnifiedSixW(
          end_users=['@team'],
          implementers=extract_implementers(wi.tasks),
          reviewers=extract_reviewers(wi.tasks),
          functional_requirements=extract_from_description(wi),
          # ... populate all 15 fields
      )

      contexts.store_context(
          db,
          entity_type=EntityType.WORK_ITEM,
          entity_id=wi.id,
          six_w_data=six_w
      )

Deliverable: 12 work items with 6W contexts (confidence ≥0.70)
```

#### **Afternoon** (4 hours)

**Task 5.2: Update Documentation** (2 hours)
```yaml
Files:
  - README.md (fix broken links)
  - docs/components/workflow/README.md (update status markers)
  - docs/components/plugins/integration.md (clarify status)
  - CLAUDE.md.backup-20251018 (add database-first section)

Changes:
  1. README.md: Remove 14 broken docs/project-plan/ links
  2. workflow/README.md: Change "Not Started" → "Implemented" for PhaseValidator
  3. plugins/integration.md: Clarify core=implemented, integrations=future
  4. CLAUDE.md: Add section on database-driven architecture

Deliverable: Documentation reflects reality
```

**Task 5.3: Create Missing Component READMEs** (1 hour)
```yaml
Files:
  - docs/components/context/README.md
  - docs/components/testing/README.md
  - docs/components/security/README.md

Content:
  - Component overview
  - Architecture summary
  - Key files and modules
  - Integration points
  - Usage examples

Deliverable: 3 new README files
```

**Task 5.4: Archive Obsolete Strategic Docs** (1 hour)
```bash
# Move completed planning to archive
mkdir -p docs/strategic/completed/

mv docs/strategic/v2-aipm-cli/04-implementation/development-phases.md \
   docs/strategic/completed/

mv docs/strategic/v2-aipm-cli/04-implementation/phases/ \
   docs/strategic/completed/phases/

# Add COMPLETED header to archived docs
for file in docs/strategic/completed/*.md; do
  sed -i '1i\> **STATUS: COMPLETED 2025-10-16** - System is 90% built\n' "$file"
done

# Update strategic README to point to archives
```

---

## 🧪 **Testing Plan**

### **Test Coverage Requirements**

| Component | Target | Tests to Add |
|-----------|--------|--------------|
| **Migration 0023** | 95% | 8-10 tests |
| **Migration 0024** | 95% | 8-10 tests |
| **EventBus singleton** | 90% | 5-7 tests |
| **Phase alignment** | 95% | 10-12 tests |
| **PhaseProgressionService** | 90% | 15-20 tests |
| **Gate validators** | 90% | 30-40 tests (5-7 per gate) |
| **CLI commands** | 85% | 15-20 tests |

**Total New Tests**: 91-119 tests

### **Testing Strategy**

**Unit Tests** (60% of new tests):
- Each gate validator independently
- PhaseProgressionService methods
- EventBus singleton behavior
- Phase-status validation logic

**Integration Tests** (30% of new tests):
- Full phase advancement workflow
- Workflow service with phase gates
- CLI commands end-to-end
- Migration data integrity

**Regression Tests** (10% of new tests):
- Existing 1,962 tests still pass
- No performance degradation
- No feature breakage

---

## 📊 **Verification Checklist**

### **End of Day Monday**
- [ ] Migration 0023 created and tested
- [ ] Migration 0024 created and tested
- [ ] EventBus singleton implemented
- [ ] Event adapter updated
- [ ] All migrations passing locally

### **End of Day Tuesday**
- [ ] Phase-status alignment validation added
- [ ] ADR-014 created (phase-status decision)
- [ ] All validation tests passing

### **End of Day Wednesday**
- [ ] 6 phase gate validators created
- [ ] Base gate validator interface defined
- [ ] ~30-40 gate validation tests passing

### **End of Day Thursday**
- [ ] PhaseGateValidator integrated with WorkflowService
- [ ] Phase CLI commands operational
- [ ] Integration tests passing
- [ ] Can advance phase via CLI

### **End of Day Friday**
- [ ] 12 active work items have 6W contexts
- [ ] Documentation updated and accurate
- [ ] All 1,962+ tests passing
- [ ] Sprint retrospective completed

---

## 🚨 **Risk Management**

### **High Risk Items**

1. **Migration on Production Database** 🔴
   - Risk: Data loss or corruption
   - Mitigation: Backup before migration, test on copy first
   - Rollback: Keep .agentpm/data/agentpm.db.backup.2025-10-16

2. **EventBus Singleton Breaking Change** ⚠️
   - Risk: Existing code expects new instance
   - Mitigation: Backward compatible (same interface)
   - Testing: Load test to verify behavior

3. **Phase Gate Integration Breaking Workflow** ⚠️
   - Risk: Valid transitions now blocked
   - Mitigation: Start with validation warnings, escalate to errors
   - Rollback: Feature flag to disable phase gates

### **Low Risk Items**

4. **Documentation Updates** ✅
   - Risk: Minimal (text only)
   - No code changes required

5. **Context Population** ✅
   - Risk: Low (adding data, not changing schema)
   - Can delete and repopulate if issues

---

## 📈 **Expected Outcomes**

### **By End of Week 1**

| Metric | Before | After | Improvement |
|--------|--------|-------|-------------|
| **Critical Issues** | 10 | 0 | 100% resolved |
| **Phase Gate Enforcement** | 0% | 100% | Fully operational |
| **Context Coverage** | 2.8% | 100% active | 36x increase |
| **Documentation Accuracy** | 75% | 90%+ | 20% improvement |
| **Database Health** | 67/100 | 80/100 | +13 points |
| **Production Readiness** | 85% | 95% | Production-safe |

### **Technical Debt Impact**

**Debt Paid Off**:
- ✅ Event type mismatch (6 months old)
- ✅ EventBus lifecycle issue (3 months old)
- ✅ Phase integration gap (design-implementation gap)
- ✅ Documentation staleness (6-12 months behind)

**Debt Added**: Minimal (clean implementation following existing patterns)

---

## 💰 **Budget & Resources**

### **Time Budget**

| Day | Planned | Buffer | Total |
|-----|---------|--------|-------|
| Mon | 8h | 0h | 8h |
| Tue | 8h | 0h | 8h |
| Wed | 8h | 0h | 8h |
| Thu | 8h | 0h | 8h |
| Fri | 8h | 0h | 8h |
| **Total** | **40h** | **0h** | **40h** |

**Recommendation**: Build in 20% buffer (8h) for unknowns = 48h total

### **Engineer Requirements**

**Option A: 1 Full-Time Engineer** (40h/week)
- Complete all tasks
- 8h/day for 5 days
- Requires focus (no interruptions)

**Option B: 2 Part-Time Engineers** (20h/week each)
- Split work by expertise:
  - Engineer 1: Database, migrations, EventBus, testing (20h)
  - Engineer 2: Phase gates, workflow integration, CLI, docs (20h)
- Parallel work possible (faster delivery)

**Recommended**: **Option B** - Parallel execution, faster completion

---

## 📋 **Daily Standup Questions**

### **Monday Standup**
- [ ] Did migrations run successfully?
- [ ] Are backups created?
- [ ] Any schema issues discovered?

### **Tuesday Standup**
- [ ] Is phase-status decision made? (ADR-014)
- [ ] Are validation tests passing?
- [ ] Any edge cases found?

### **Wednesday Standup**
- [ ] How many gate validators complete? (target: 6)
- [ ] Are gate tests comprehensive?
- [ ] Any missing requirements discovered?

### **Thursday Standup**
- [ ] Is WorkflowService integration complete?
- [ ] Do CLI commands work end-to-end?
- [ ] Any workflow breakage detected?

### **Friday Standup**
- [ ] How many contexts populated? (target: 12)
- [ ] Is documentation updated?
- [ ] Are all tests passing?
- [ ] Ready for sprint review?

---

## ✅ **Definition of Done**

### **Sprint Completion Criteria**

**Code Quality**:
- [ ] All new code has ≥90% test coverage
- [ ] All 1,962+ existing tests still passing
- [ ] No new linter warnings
- [ ] Type hints on all new public APIs

**Functionality**:
- [ ] Migration 0023 & 0024 applied successfully
- [ ] EventBus singleton preventing thread leaks
- [ ] Phase gates enforced in workflow transitions
- [ ] 6 gate validators operational
- [ ] 3 new CLI commands working
- [ ] 12 active work items have contexts

**Documentation**:
- [ ] ADR-014 created and accepted
- [ ] README broken links fixed
- [ ] Component docs updated
- [ ] 3 new component READMEs created

**Quality**:
- [ ] Zero critical bugs introduced
- [ ] No performance regression
- [ ] Database backup exists
- [ ] Rollback procedure documented

---

## 🎯 **Sprint Review Agenda** (Friday EOD)

### **Demo** (30 minutes)

1. **Show Phase Gate Enforcement** (10 min)
   ```bash
   # Try to advance without meeting requirements
   apm work-item phase-advance 81
   # Shows: Missing requirements with specific errors

   # Show gate validation
   apm work-item phase-validate 81
   # Shows: Gate status, confidence score, missing items

   # Complete requirements and advance
   # (after fixing issues)
   apm work-item phase-advance 81
   # Shows: Phase advanced D1→P1, status updated draft→ready
   ```

2. **Show Context Intelligence** (10 min)
   ```bash
   # Show context assembly
   apm context show --work-item-id=81
   # Shows: Complete 6W analysis, confidence score, plugin facts
   ```

3. **Show EventBus Fix** (5 min)
   ```bash
   # Perform 100 state transitions
   # Show thread count stays at 1 (not 100)
   ps -ef | grep python | wc -l
   ```

4. **Show Documentation Updates** (5 min)
   - Navigate to updated docs
   - Show accurate status markers
   - Show new component READMEs

### **Metrics Review** (15 minutes)

- Critical issues resolved: 10/10 ✅
- Phase gates operational: Yes ✅
- Context coverage: 12/12 active items ✅
- Documentation accuracy: 90%+ ✅
- Tests passing: 1,962+ ✅
- Database health: 80/100 ✅

### **Retrospective** (15 minutes)

**What Went Well**:
- Parallel agent analysis saved time
- Clear requirements from reports
- Database-first approach clarified

**What Could Improve**:
- Earlier testing (shift left)
- More frequent integration testing
- Better time estimation

**Actions for Week 2**:
- Continue with database activation (14 hours)
- Begin documentation sprint (20 hours)
- Maintain test-first approach

---

## 📖 **Reference Materials**

### **Key Reports for Week 1**

- **Report #3**: Critical Issues & Fixes (detailed solutions)
- **Report #4**: Phase Workflow Integration Design (implementation guide)
- **Report #8**: Database Content Analysis (data to work with)

### **Code References**

- `agentpm/core/workflow/phase_validator.py:92-160` - PHASE_SEQUENCES
- `agentpm/core/workflow/phase_validator.py:188-553` - PHASE_REQUIREMENTS
- `agentpm/core/workflow/service.py:112-350` - WorkflowService transitions
- `agentpm/core/sessions/event_bus.py:30-120` - EventBus to fix

### **Database Queries**

```sql
-- Check active work items
SELECT id, name, type, status, phase FROM work_items WHERE status='active';

-- Check contexts
SELECT COUNT(*) FROM contexts WHERE entity_type='work_item';

-- Check migrations
SELECT version, applied_at FROM schema_migrations ORDER BY version DESC LIMIT 5;
```

---

## 🚀 **Ready to Execute**

**All tasks are**:
- ✅ Clearly defined with acceptance criteria
- ✅ Time-estimated (realistic, tested estimates)
- ✅ Prioritized by dependency and impact
- ✅ Testable (test plans included)
- ✅ Documented (ADRs, READMEs, inline docs)

**Start Command**:
```bash
# Monday morning, Day 1, Task 1.1
cd /Users/nigelcopley/.project_manager/aipm-v2
touch agentpm/core/database/migrations/files/migration_0023.py

# Follow task 1.1 specification above
```

---

**Sprint Status**: Ready to begin ✅
**Blockers**: None
**Dependencies**: All resolved
**Risk Level**: LOW-MEDIUM (well-planned, incremental changes)
