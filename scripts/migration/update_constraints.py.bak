#!/usr/bin/env python3
"""
Simple Database Constraint Update Script

This script updates the CHECK constraints in the database schema
to use the new 6-state status values by recreating the tables.
"""

import sqlite3
import sys
from pathlib import Path

def update_constraints(db_path: Path, dry_run: bool = False):
    """Update CHECK constraints to use new status values."""
    if not db_path.exists():
        print(f"‚ùå Database {db_path} does not exist")
        return False
    
    print(f"üîç Updating constraints: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        if dry_run:
            print("üîç DRY RUN - Would execute the following:")
        
        # Get the current schema
        cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name='work_items';")
        work_items_schema = cursor.fetchone()[0]
        
        cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name='tasks';")
        tasks_schema = cursor.fetchone()[0]
        
        print(f"üìù Current work_items schema:")
        print(work_items_schema)
        print(f"\nüìù Current tasks schema:")
        print(tasks_schema)
        
        if not dry_run:
            # Update work_items CHECK constraint
            new_work_items_schema = work_items_schema.replace(
                "CHECK(status IN ('proposed', 'validated', 'accepted', 'in_progress', 'review', 'completed', 'archived', 'blocked', 'cancelled'))",
                "CHECK(status IN ('draft', 'ready', 'active', 'review', 'done', 'archived', 'blocked', 'cancelled'))"
            ).replace(
                "DEFAULT 'proposed'",
                "DEFAULT 'draft'"
            )
            
            # Update tasks CHECK constraint
            new_tasks_schema = tasks_schema.replace(
                "CHECK(status IN ('proposed', 'validated', 'accepted', 'in_progress', 'review', 'completed', 'archived', 'blocked', 'cancelled'))",
                "CHECK(status IN ('draft', 'ready', 'active', 'review', 'done', 'archived', 'blocked', 'cancelled'))"
            ).replace(
                "DEFAULT 'proposed'",
                "DEFAULT 'draft'"
            )
            
            print(f"\nüìù Updated work_items schema:")
            print(new_work_items_schema)
            print(f"\nüìù Updated tasks schema:")
            print(new_tasks_schema)
            
            # Create new tables with updated constraints
            print(f"\nüìù Creating new tables...")
            cursor.execute("DROP TABLE IF EXISTS work_items_new;")
            cursor.execute("DROP TABLE IF EXISTS tasks_new;")
            
            # Replace CREATE TABLE IF NOT EXISTS with CREATE TABLE
            new_work_items_schema = new_work_items_schema.replace("CREATE TABLE IF NOT EXISTS", "CREATE TABLE")
            new_tasks_schema = new_tasks_schema.replace("CREATE TABLE IF NOT EXISTS", "CREATE TABLE")
            
            cursor.execute(new_work_items_schema.replace('"work_items"', 'work_items_new'))
            cursor.execute(new_tasks_schema.replace('"tasks"', 'tasks_new'))
            
            # Copy data
            print(f"üìù Copying data...")
            cursor.execute("INSERT INTO work_items_new SELECT * FROM work_items;")
            cursor.execute("INSERT INTO tasks_new SELECT * FROM tasks;")
            
            # Drop old tables and rename new ones
            print(f"üìù Replacing tables...")
            cursor.execute("DROP TABLE work_items;")
            cursor.execute("DROP TABLE tasks;")
            cursor.execute("ALTER TABLE work_items_new RENAME TO work_items;")
            cursor.execute("ALTER TABLE tasks_new RENAME TO tasks;")
            
            # Recreate indexes
            print(f"üìù Recreating indexes...")
            cursor.execute("CREATE INDEX idx_work_items_project ON work_items(project_id);")
            cursor.execute("CREATE INDEX idx_work_items_parent ON work_items(parent_work_item_id);")
            cursor.execute("CREATE INDEX idx_work_items_status ON work_items(status);")
            cursor.execute("CREATE INDEX idx_work_items_type ON work_items(type);")
            cursor.execute("CREATE INDEX idx_work_items_priority ON work_items(priority);")
            cursor.execute("CREATE INDEX idx_work_items_continuous ON work_items(is_continuous);")
        
        conn.commit()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error updating constraints: {e}")
        return False

def main():
    """Main script execution."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Update database CHECK constraints for 6-state status system')
    parser.add_argument('--dry-run', action='store_true', 
                       help='Show what would be changed without making changes')
    parser.add_argument('--db-path', type=str, default='.agentpm/data/agentpm.db',
                       help='Path to database file (default: .agentpm/data/agentpm.db)')
    
    args = parser.parse_args()
    
    db_path = Path(args.db_path)
    
    if args.dry_run:
        print("üîç DRY RUN MODE - No changes will be made")
    
    success = update_constraints(db_path, dry_run=args.dry_run)
    
    if success:
        if args.dry_run:
            print(f"\nüí° Run without --dry-run to apply changes")
        else:
            print(f"\n‚úÖ Constraint update complete!")
            print(f"\nüîß Next steps:")
            print(f"  1. Run status migration: python3 migrate_status_values.py")
            print(f"  2. Test the CLI: apm status")
    else:
        print(f"\n‚ùå Constraint update failed")
        sys.exit(1)

if __name__ == '__main__':
    main()
