"""
Tests for 'apm web' CLI command.

Tests web server management functionality including:
- Command registration and help
- Status checking
- Port conflict detection
- Database auto-detection
"""

import pytest
from click.testing import CliRunner
from unittest.mock import patch, MagicMock

from agentpm.cli.main import cli


@pytest.fixture
def cli_runner():
    """Create Click CLI runner."""
    return CliRunner()


def test_web_command_help(cli_runner):
    """Test that web command shows help."""
    result = cli_runner.invoke(cli, ['web', '--help'])
    assert result.exit_code == 0
    assert 'Web server management commands' in result.output
    assert 'start' in result.output
    assert 'status' in result.output
    assert 'stop' in result.output


def test_web_start_help(cli_runner):
    """Test that web start command shows help."""
    result = cli_runner.invoke(cli, ['web', 'start', '--help'])
    assert result.exit_code == 0
    assert 'Start the APM (Agent Project Manager) web server' in result.output
    assert '--port' in result.output
    assert '--debug' in result.output
    assert '--dev' in result.output


def test_web_status_no_servers(cli_runner):
    """Test web status when no servers are running."""
    with patch('agentpm.cli.commands.web.find_flask_processes', return_value=[]):
        result = cli_runner.invoke(cli, ['web', 'status'])
        assert result.exit_code == 0
        assert 'No AIPM web servers are currently running' in result.output


def test_web_stop_no_servers(cli_runner):
    """Test web stop when no servers are running."""
    with patch('agentpm.cli.commands.web.find_flask_processes', return_value=[]):
        result = cli_runner.invoke(cli, ['web', 'stop'])
        assert result.exit_code == 0
        assert 'No AIPM web servers are currently running' in result.output


def test_database_detection():
    """Test database path detection logic."""
    from agentpm.cli.commands.web import detect_database_path
    from pathlib import Path
    
    # Test with environment variable
    with patch.dict('os.environ', {'AIPM_DB_PATH': '/test/db.db'}):
        result = detect_database_path(Path('/test'))
        assert result == Path('/test/db.db')
    
    # Test with project database
    with patch('pathlib.Path.exists', return_value=True):
        result = detect_database_path(Path('/test/project'))
        expected = Path('/test/project/.agentpm/data/agentpm.db')
        assert result == expected


def test_port_conflict_detection():
    """Test port conflict detection."""
    from agentpm.cli.commands.web import is_port_in_use
    
    # Mock socket to simulate port in use
    with patch('socket.socket') as mock_socket:
        mock_socket.return_value.__enter__.return_value.connect_ex.return_value = 0
        assert is_port_in_use(5000) is True
        
        mock_socket.return_value.__enter__.return_value.connect_ex.return_value = 1
        assert is_port_in_use(5000) is False


def test_find_available_port():
    """Test finding available port."""
    from agentpm.cli.commands.web import find_available_port
    
    # Test with a high port number that's likely to be available
    result = find_available_port(9999, max_attempts=5)
    assert result is not None
    assert result >= 9999


def test_web_command_in_main_help(cli_runner):
    """Test that web command appears in main help."""
    result = cli_runner.invoke(cli, ['--help'])
    assert result.exit_code == 0
    assert 'web' in result.output
    assert 'Web server management commands' in result.output
