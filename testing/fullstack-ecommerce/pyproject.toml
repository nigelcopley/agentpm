[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ecommerce-backend"
version = "1.0.0"
description = "E-commerce backend API with Django REST Framework"
requires-python = ">=3.11"
dependencies = [
    "django>=4.2,<5.0",
    "djangorestframework>=3.14",
    "django-filter>=23.0",
    "django-cors-headers>=4.0",
    "psycopg2-binary>=2.9",
    "celery>=5.3",
    "redis>=5.0",
    "django-environ>=0.11",
    "drf-spectacular>=0.27",  # OpenAPI schema generation
    "pillow>=10.0",  # Image handling
    "stripe>=7.0",  # Payment processing
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4",
    "pytest-django>=4.5",
    "pytest-cov>=4.1",
    "factory-boy>=3.3",
    "faker>=20.0",
    "black>=23.0",
    "mypy>=1.7",
    "ruff>=0.1",
    "django-stubs>=4.2",
    "djangorestframework-stubs>=3.14",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.venv
  | migrations
  | __pycache__
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "F", "I", "N", "W", "B", "C4", "UP"]
ignore = ["E501"]  # Line too long (handled by black)

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

[tool.django-stubs]
django_settings_module = "config.settings"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
testpaths = ["backend/tests", "backend/apps/*/tests"]
addopts = [
    "--strict-markers",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
