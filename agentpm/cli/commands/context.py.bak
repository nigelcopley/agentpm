"""
apm context - Context management commands

Provides access to hierarchical project context for AI agents:
- Project context (governance, tech stack, standards)
- Work item context (business logic, requirements)
- Task context (implementation details, code files)

Commands:
- show: Display hierarchical context with confidence scoring
- refresh: Regenerate context (trigger plugin detection)
"""

import click
from rich.panel import Panel
from rich.table import Table
from agentpm.cli.utils.project import ensure_project_root, get_current_project_id
from agentpm.cli.utils.services import get_database_service, get_context_service
from agentpm.cli.utils.validation import validate_task_exists, validate_work_item_exists
from agentpm.core.database.methods import tasks as task_methods
from agentpm.core.database.methods import work_items as wi_methods
from agentpm.core.database.methods import contexts as context_methods
from agentpm.core.database.enums import EntityType


@click.group()
def context():
    """
    Access hierarchical project context.

    Context flows from Project ‚Üí Work Item ‚Üí Task, providing AI agents
    with governance, business logic, and implementation details.

    \b
    Context Hierarchy:
      Project    - Governance, tech stack, standards
      Work Item  - Business requirements, acceptance criteria
      Task       - Implementation details, code files, patterns

    \b
    Examples:
      apm context show --task-id=5
      apm context show --work-item-id=1
      apm context show --project
      apm context refresh --task-id=5
    """
    pass


@context.command()
@click.option(
    '--task-id', 'task_id',
    type=int,
    help='Show context for specific task'
)
@click.option(
    '--work-item-id', 'work_item_id',
    type=int,
    help='Show context for specific work item'
)
@click.option(
    '--project', 'show_project',
    is_flag=True,
    help='Show project-level context'
)
@click.option(
    '--format',
    type=click.Choice(['rich', 'json', 'markdown'], case_sensitive=False),
    default='rich',
    help='Output format'
)
@click.pass_context
def show(ctx: click.Context, task_id: int, work_item_id: int, show_project: bool, format: str):
    """
    Show hierarchical context with confidence scoring.

    Displays 6W context (WHO/WHAT/WHERE/WHEN/WHY/HOW) with
    hierarchical merging (task overrides work item overrides project).

    \b
    Examples:
      apm context show --task-id=5           # Task + work item + project context
      apm context show --work-item-id=1      # Work item + project context
      apm context show --project             # Project context only
      apm context show --task-id=5 --format=json  # JSON for agents
    """
    console = ctx.obj['console']
    project_root = ensure_project_root(ctx)
    project_id = get_current_project_id(ctx)
    db = get_database_service(project_root)

    # Validate and get context
    if task_id:
        validate_task_exists(db, task_id, ctx)
        task = task_methods.get_task(db, task_id)
        work_item = wi_methods.get_work_item(db, task.work_item_id)

        # Get contexts
        task_context = context_methods.get_entity_context(db, EntityType.TASK, task_id)
        wi_context = context_methods.get_entity_context(db, EntityType.WORK_ITEM, task.work_item_id)
        project_context = context_methods.get_entity_context(db, EntityType.PROJECT, project_id)

        entity_name = f"Task #{task_id}: {task.name}"
        contexts = {
            'task': task_context,
            'work_item': wi_context,
            'project': project_context
        }

    elif work_item_id:
        validate_work_item_exists(db, work_item_id, ctx)
        work_item = wi_methods.get_work_item(db, work_item_id)

        wi_context = context_methods.get_entity_context(db, EntityType.WORK_ITEM, work_item_id)
        project_context = context_methods.get_entity_context(db, EntityType.PROJECT, project_id)

        entity_name = f"Work Item #{work_item_id}: {work_item.name}"
        contexts = {
            'work_item': wi_context,
            'project': project_context
        }

    elif show_project:
        project_context = context_methods.get_entity_context(db, EntityType.PROJECT, project_id)
        from agentpm.core.database.methods import projects as project_methods
        project = project_methods.get_project(db, project_id)

        entity_name = f"Project: {project.name}"
        contexts = {
            'project': project_context
        }

    else:
        console.print("\n‚ùå [red]Must specify --task-id, --work-item-id, or --project[/red]\n")
        console.print("üí° Examples:")
        console.print("   apm context show --task-id=5")
        console.print("   apm context show --work-item-id=1")
        console.print("   apm context show --project\n")
        raise click.Abort()

    if format == 'json':
        import json
        output = {
            'entity': entity_name,
            'contexts': {}
        }

        for level, ctx_data in contexts.items():
            if ctx_data:
                output['contexts'][level] = {
                    'who': ctx_data.who,
                    'what': ctx_data.what,
                    'where': ctx_data.where,
                    'when': ctx_data.when_context,
                    'why': ctx_data.why,
                    'how': ctx_data.how
                }

        console.print(json.dumps(output, indent=2))

    else:
        # Rich format
        console.print()
        console.print(Panel.fit(
            f"[bold cyan]{entity_name}[/bold cyan]",
            title="üìñ Hierarchical Context"
        ))
        console.print()

        # Display contexts by level
        level_names = {'task': 'üéØ Task Context', 'work_item': 'üìã Work Item Context', 'project': 'üèóÔ∏è  Project Context'}

        for level, ctx_data in contexts.items():
            if ctx_data:
                console.print(f"[bold]{level_names[level]}[/bold]")

                # 6W Display
                if ctx_data.who:
                    console.print(f"  [cyan]WHO:[/cyan] {ctx_data.who}")
                if ctx_data.what:
                    console.print(f"  [cyan]WHAT:[/cyan] {ctx_data.what}")
                if ctx_data.where:
                    console.print(f"  [cyan]WHERE:[/cyan] {ctx_data.where}")
                if ctx_data.when_context:
                    console.print(f"  [cyan]WHEN:[/cyan] {ctx_data.when_context}")
                if ctx_data.why:
                    console.print(f"  [cyan]WHY:[/cyan] {ctx_data.why}")
                if ctx_data.how:
                    console.print(f"  [cyan]HOW:[/cyan] {ctx_data.how}")

                console.print()
            else:
                console.print(f"[dim]{level_names[level]}: Not set[/dim]\n")

        # Guidance
        console.print("[bold cyan]üí° Context System:[/bold cyan]")
        console.print("   Context provides hierarchical 6W information for AI agents")
        console.print("   Task context overrides work item context overrides project context")
        console.print()


@context.command()
@click.option(
    '--task-id', 'task_id',
    type=int,
    help='Refresh context for specific task'
)
@click.pass_context
def refresh(ctx: click.Context, task_id: int):
    """
    Refresh context (trigger plugin re-detection).

    Re-runs plugin detection and updates context confidence scores.
    Use when project structure changes significantly.

    \b
    Example:
      apm context refresh --task-id=5
    """
    console = ctx.obj['console']
    project_root = ensure_project_root(ctx)
    db = get_database_service(project_root)

    if task_id:
        validate_task_exists(db, task_id, ctx)

    console.print("\nüîÑ [cyan]Context refresh functionality coming soon[/cyan]")
    console.print("   Will re-run plugin detection and update confidence scores\n")

    # TODO: Implement when PluginOrchestrator fully integrated
    # context_svc = get_context_service(project_root)
    # context_svc.refresh_context(task_id)
