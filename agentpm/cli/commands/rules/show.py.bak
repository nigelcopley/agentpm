"""
apm rules show - Display detailed rule information
"""

import click
from pathlib import Path
from rich.panel import Panel
from rich.console import Console
from rich.table import Table
from agentpm.core.database import DatabaseService
from agentpm.core.database.adapters import RuleAdapter
from agentpm.core.database.methods import projects as project_methods
from agentpm.cli.utils.project import ensure_project_root, get_current_project_id


@click.command()
@click.argument('rule_id')
@click.pass_context
def show_rule(ctx: click.Context, rule_id: str):
    """
    Display detailed information about a specific rule.

    \b
    Examples:
      apm rules show DP-001
      apm rules show CQ-012
    """
    console = ctx.obj['console']

    # Find project database
    cwd = Path.cwd()
    aipm_dir = cwd / '.agentpm'

    if not aipm_dir.exists():
        console.print("[red]❌ Not an AIPM project (no .agentpm directory found)[/red]")
        console.print("[dim]Run 'apm init' to initialize this project[/dim]")
        raise click.Abort()

    db_path = aipm_dir / 'data' / 'agentpm.db'
    if not db_path.exists():
        console.print("[red]❌ Project database not found[/red]")
        raise click.Abort()

    # Connect to database
    db = DatabaseService(str(db_path))

    # Get project
    try:
        project_id = get_current_project_id(ctx)
        project = project_methods.get_project(db, project_id)
        if not project:
            console.print("[red]❌ Project not found in database[/red]")
            raise click.Abort()
    except Exception as e:
        console.print(f"[red]❌ Error loading project: {e}[/red]")
        raise click.Abort()

    # Get rule by ID
    try:
        rule = RuleAdapter.get_by_rule_id(db, project.id, rule_id.upper())

        if not rule:
            console.print(f"\n[red]❌ Rule '{rule_id}' not found[/red]")
            console.print("[dim]Run 'apm rules list' to see all rules[/dim]\n")
            raise click.Abort()

    except Exception as e:
        console.print(f"[red]❌ Error loading rule: {e}[/red]")
        raise click.Abort()

    # Display rule details
    console.print()

    # Main panel
    enforcement_color = {
        'BLOCK': 'red',
        'LIMIT': 'yellow',
        'GUIDE': 'cyan',
        'ENHANCE': 'green'
    }.get(rule.enforcement_level, 'white')

    # Handle optional category and rationale
    category_display = rule.category.replace('_', ' ').title() if rule.category else "Uncategorized"
    description_text = rule.description or "No description provided"
    rationale_text = getattr(rule, 'rationale', None) or 'No rationale provided'

    panel = Panel(
        f"[bold]{description_text}[/bold]\n\n"
        f"[dim]{rationale_text}[/dim]",
        title=f"[{enforcement_color}]{rule.rule_id}[/{enforcement_color}] - {category_display}",
        border_style=enforcement_color
    )
    console.print(panel)

    # Details table
    details = Table(show_header=False, box=None, padding=(0, 2))
    details.add_column("Field", style="cyan", width=18)
    details.add_column("Value", style="white")

    details.add_row("Enforcement Level", f"[{enforcement_color}]{rule.enforcement_level}[/{enforcement_color}]")
    details.add_row("Category", category_display)

    if rule.validation_logic:
        details.add_row("Validation Logic", rule.validation_logic[:60] + "..." if len(rule.validation_logic) > 60 else rule.validation_logic)

    if rule.error_message:
        details.add_row("Error Message", rule.error_message)

    details.add_row("Created", rule.created_at.strftime("%Y-%m-%d %H:%M") if rule.created_at else "Unknown")

    console.print(details)

    # Show enforcement explanation
    enforcement_help = {
        'BLOCK': "❌ BLOCK: This rule will prevent operations that violate it.",
        'LIMIT': "⚠️  LIMIT: This rule will warn but allow operations to proceed.",
        'GUIDE': "ℹ️  GUIDE: This rule provides guidance without enforcement.",
        'ENHANCE': "✨ ENHANCE: This rule enriches context for AI agents."
    }

    if rule.enforcement_level in enforcement_help:
        console.print(f"\n[dim]{enforcement_help[rule.enforcement_level]}[/dim]\n")

    # Show related commands
    console.print("[dim]Commands:[/dim]")
    console.print("  apm rules list              # View all rules")
    console.print("  apm rules configure         # Re-configure rules\n")
