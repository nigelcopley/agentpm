"""
apm work-item - Work item management commands

Provides CRUD operations for work items (features, bugs, research, etc.)
with quality gate enforcement and helpful guidance.

Commands:
- create: Create new work item with type-specific validation
- list: List work items with filters
- show: Display complete work item details with quality gate status
"""

import click
from rich.table import Table
from agentpm.core.database.models import WorkItem
from agentpm.core.database.enums import WorkItemType, WorkItemStatus
from agentpm.core.database.methods import work_items as wi_methods
from agentpm.cli.utils.project import ensure_project_root, get_current_project_id
from agentpm.cli.utils.services import get_database_service
from agentpm.cli.utils.validation import get_work_item_type_choices


@click.group(name='work-item')
def work_item():
    """
    Manage work items (features, bugs, research).

    Work items are the primary organizational unit for delivering value.
    Each work item type has specific quality gates and required task types.

    \b
    Work Item Types:
      feature     - New functionality (requires DESIGN+IMPL+TEST+DOC)
      bugfix      - Bug fixes (requires ANALYSIS+BUGFIX+TESTING)
      research    - Investigation (requires ANALYSIS+DOCUMENTATION)
      planning    - Planning (forbids IMPLEMENTATION)
      refactoring - Code improvement (requires ANALYSIS+REFACTORING+TESTING)
      infrastructure - DevOps (requires DESIGN+DEPLOYMENT+TESTING+DOC)
      enhancement - Improvements (requires IMPLEMENTATION+TESTING)

    \b
    Examples:
      apm work-item create "User Authentication" --type=feature
      apm work-item list --type=feature --status=in_progress
      apm work-item show 123
    """
    pass


@work_item.command()
@click.argument('name')
@click.option(
    '--type', 'wi_type',
    type=click.Choice(get_work_item_type_choices(), case_sensitive=False),
    required=True,
    help='Work item type (feature, bugfix, research, etc.)'
)
@click.option(
    '--description', '-d',
    default='',
    help='Work item description'
)
@click.option(
    '--priority', '-p',
    type=click.IntRange(1, 5),
    default=3,
    help='Priority (1=highest, 5=lowest, default=3)'
)
@click.pass_context
def create(ctx: click.Context, name: str, wi_type: str, description: str, priority: int):
    """
    Create new work item with type-specific quality gates.

    \b
    Quality Gates by Type:
      FEATURE    ‚Üí Must have: DESIGN, IMPLEMENTATION, TESTING, DOCUMENTATION tasks
      BUGFIX     ‚Üí Must have: ANALYSIS, BUGFIX, TESTING tasks
      PLANNING   ‚Üí Cannot have: IMPLEMENTATION or DEPLOYMENT tasks
      RESEARCH   ‚Üí Must have: ANALYSIS, DOCUMENTATION tasks

    \b
    Examples:
      apm work-item create "Add OAuth2" --type=feature
      apm work-item create "Fix login bug" --type=bugfix -p 1
      apm work-item create "Research GraphQL" --type=research -d "Evaluate GraphQL for API"
    """
    console = ctx.obj['console']
    project_root = ensure_project_root(ctx)
    project_id = get_current_project_id(ctx)
    db = get_database_service(project_root)

    # Create work item
    work_item = WorkItem(
        name=name,
        description=description,
        type=WorkItemType(wi_type),
        status=WorkItemStatus.PROPOSED,
        project_id=project_id,
        priority=priority
    )

    created_wi = wi_methods.create_work_item(db, work_item)

    # Success message
    console.print(f"\n‚úÖ [green]Work item created:[/green] {created_wi.name}")
    console.print(f"   ID: {created_wi.id}")
    console.print(f"   Type: {created_wi.type.value}")
    console.print(f"   Status: {created_wi.status.value}")
    console.print(f"   Priority: {created_wi.priority}\n")

    # Show required tasks for this type
    console.print("üìã [cyan]Required tasks for this work item type:[/cyan]")

    if created_wi.type == WorkItemType.FEATURE:
        console.print("   ‚Ä¢ DESIGN task (architecture/design)")
        console.print("   ‚Ä¢ IMPLEMENTATION task (code changes)")
        console.print("   ‚Ä¢ TESTING task (test coverage)")
        console.print("   ‚Ä¢ DOCUMENTATION task (docs/guides)")
    elif created_wi.type == WorkItemType.BUGFIX:
        console.print("   ‚Ä¢ ANALYSIS task (root cause analysis)")
        console.print("   ‚Ä¢ BUGFIX task (actual fix)")
        console.print("   ‚Ä¢ TESTING task (regression tests)")
    elif created_wi.type == WorkItemType.RESEARCH:
        console.print("   ‚Ä¢ ANALYSIS task (conduct research)")
        console.print("   ‚Ä¢ DOCUMENTATION task (findings document)")
    elif created_wi.type == WorkItemType.PLANNING:
        console.print("   ‚Ä¢ ANALYSIS, DESIGN, DOCUMENTATION, REVIEW tasks")
        console.print("   ‚ö†Ô∏è  IMPLEMENTATION and DEPLOYMENT tasks FORBIDDEN")

    console.print(f"\nüìö [cyan]Next step:[/cyan]")
    console.print(f"   apm task create \"Task name\" --work-item-id={created_wi.id} --type=design\n")


@work_item.command()
@click.option(
    '--type', 'wi_type',
    type=click.Choice(get_work_item_type_choices(), case_sensitive=False),
    help='Filter by work item type'
)
@click.option(
    '--status',
    type=click.Choice(['proposed', 'validated', 'accepted', 'in_progress', 'review', 'completed', 'blocked', 'cancelled', 'archived'], case_sensitive=False),
    help='Filter by status'
)
@click.option(
    '--format',
    type=click.Choice(['table', 'json'], case_sensitive=False),
    default='table',
    help='Output format'
)
@click.pass_context
def list(ctx: click.Context, wi_type: str, status: str, format: str):
    """
    List work items with optional filters.

    \b
    Examples:
      apm work-item list                      # All work items
      apm work-item list --type=feature       # Features only
      apm work-item list --status=in_progress # Active work
      apm work-item list --format=json        # JSON output
    """
    console = ctx.obj['console']
    project_root = ensure_project_root(ctx)
    project_id = get_current_project_id(ctx)
    db = get_database_service(project_root)

    # Get work items
    work_items = wi_methods.list_work_items(db, project_id=project_id)

    # Apply filters
    if wi_type:
        work_items = [wi for wi in work_items if wi.type.value == wi_type]
    if status:
        work_items = [wi for wi in work_items if wi.status.value == status]

    if not work_items:
        console.print("\n‚ÑπÔ∏è  [yellow]No work items found[/yellow]\n")
        console.print("üí° [cyan]Create one with:[/cyan]")
        console.print("   apm work-item create \"My Feature\" --type=feature\n")
        return

    if format == 'json':
        import json
        output = [
            {
                'id': wi.id,
                'name': wi.name,
                'type': wi.type.value,
                'status': wi.status.value,
                'priority': wi.priority
            }
            for wi in work_items
        ]
        console.print(json.dumps(output, indent=2))
    else:
        # Rich table
        table = Table(title=f"\nüìã Work Items ({len(work_items)})")
        table.add_column("ID", style="cyan")
        table.add_column("Name", style="bold")
        table.add_column("Type", style="magenta")
        table.add_column("Status", style="yellow")
        table.add_column("Priority")

        for wi in work_items:
            table.add_row(
                str(wi.id),
                wi.name,
                wi.type.value,
                wi.status.value,
                str(wi.priority)
            )

        console.print(table)
        console.print()


@work_item.command()
@click.argument('work_item_id', type=int)
@click.pass_context
def show(ctx: click.Context, work_item_id: int):
    """
    Show complete work item details.

    Displays work item information, associated tasks, and quality gate status.

    \b
    Example:
      apm work-item show 123
    """
    console = ctx.obj['console']
    project_root = ensure_project_root(ctx)
    db = get_database_service(project_root)

    # Get work item
    work_item = wi_methods.get_work_item(db, work_item_id)

    if not work_item:
        console.print(f"\n‚ùå [red]Work item not found:[/red] ID {work_item_id}\n")
        console.print("üí° [yellow]List work items with:[/yellow]")
        console.print("   apm work-item list\n")
        raise click.Abort()

    # Display work item details
    console.print(f"\nüìã [bold cyan]Work Item #{work_item.id}[/bold cyan]\n")
    console.print(f"[bold]Name:[/bold] {work_item.name}")
    console.print(f"[bold]Type:[/bold] {work_item.type.value}")
    console.print(f"[bold]Status:[/bold] {work_item.status.value}")
    console.print(f"[bold]Priority:[/bold] {work_item.priority}")

    if work_item.description:
        console.print(f"\n[bold]Description:[/bold]\n{work_item.description}")

    # Show associated tasks
    from agentpm.core.database.methods import tasks as task_methods
    tasks = task_methods.list_tasks(db, work_item_id=work_item_id)

    if tasks:
        console.print(f"\n[bold]Tasks ({len(tasks)}):[/bold]")
        for task in tasks:
            console.print(f"  ‚Ä¢ [{task.type.value}] {task.name} ({task.status.value})")
    else:
        console.print("\n‚ö†Ô∏è  [yellow]No tasks yet[/yellow]")

    # Show quality gate status
    console.print(f"\n[bold]Quality Gates:[/bold]")
    task_types = {t.type for t in tasks}

    if work_item.type == WorkItemType.FEATURE:
        console.print("  FEATURE work items require:")
        console.print(f"    {'‚úÖ' if any(t.type.value == 'design' for t in tasks) else '‚ùå'} DESIGN task")
        console.print(f"    {'‚úÖ' if any(t.type.value == 'implementation' for t in tasks) else '‚ùå'} IMPLEMENTATION task")
        console.print(f"    {'‚úÖ' if any(t.type.value == 'testing' for t in tasks) else '‚ùå'} TESTING task")
        console.print(f"    {'‚úÖ' if any(t.type.value == 'documentation' for t in tasks) else '‚ùå'} DOCUMENTATION task")

    console.print()
