"""
apm agents generate - Generate provider-specific agent files from database

Uses the extensible provider generator system to create agent files for
different LLM providers (Claude Code, Cursor, Gemini, etc.).
"""

import click
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.table import Table
from pathlib import Path
from datetime import datetime
from typing import List, Optional

from agentpm.cli.utils.project import ensure_project_root, get_current_project_id
from agentpm.cli.utils.services import get_database_service
from agentpm.core.database.adapters import AgentAdapter, RuleAdapter
from agentpm.providers.generators import (
    detect_current_provider,
    get_provider_generator,
    list_available_providers,
)
from agentpm.providers.generators.base import (
    GenerationContext,
    GenerationResult,
)

console = Console()


@click.command()
@click.option('--all', is_flag=True, help='Generate all agents in database')
@click.option('--role', help='Generate specific agent by role')
@click.option(
    '--provider',
    help='LLM provider (auto-detected if not specified)',
    type=click.Choice(['claude-code', 'cursor', 'gemini'], case_sensitive=False)
)
@click.option('--force', is_flag=True, help='Regenerate even if files exist')
@click.option('--dry-run', is_flag=True, help='Show what would be generated without writing files')
@click.option('--output-dir', type=click.Path(), help='Override default output directory')
@click.pass_context
def generate(
    ctx: click.Context,
    all: bool,
    role: Optional[str],
    provider: Optional[str],
    force: bool,
    dry_run: bool,
    output_dir: Optional[str]
):
    """
    Generate provider-specific agent files from database records.

    Uses extensible provider generator system to create agent files for
    different LLM providers (Claude Code, Cursor, Gemini, etc.).

    Provider is auto-detected from environment:
    1. AIPM_LLM_PROVIDER environment variable
    2. .claude/ directory (Claude Code)
    3. .cursor/ directory (Cursor)
    4. Default to claude-code

    \b
    Generation Modes:
      ‚Ä¢ --all: Generate all agents from database
      ‚Ä¢ --role <name>: Generate single agent by role
      ‚Ä¢ Default: Show status and prompt for mode

    \b
    Provider Options:
      ‚Ä¢ claude-code: Generates .claude/agents/*.md files
      ‚Ä¢ cursor: Generates .cursor/agents/*.md files (future)
      ‚Ä¢ gemini: Generates .gemini/agents/*.md files (future)

    \b
    Examples:
      # Generate all agents (auto-detect provider)
      apm agents generate --all

      # Generate for specific provider
      apm agents generate --all --provider=claude-code

      # Generate single agent
      apm agents generate --role context-generator

      # Dry run (show what would be generated)
      apm agents generate --all --dry-run

      # Force regeneration
      apm agents generate --role agent-builder --force
    """
    try:
        # Find project
        project_root = ensure_project_root(ctx)
        project_path = Path(project_root) if output_dir is None else Path(output_dir)
        db = get_database_service(project_root)
        project_id = get_current_project_id(ctx)

        # Agent and rule adapters imported at top

        # Detect or use specified provider
        detected_provider = provider if provider else detect_current_provider(project_path)

        if not detected_provider:
            available = list_available_providers()
            console.print("‚ùå Could not detect LLM provider", style="red")
            if available:
                console.print(f"\nüí° Available providers: {', '.join(available)}", style="dim")
                console.print("   Specify with --provider=<name>", style="dim")
            else:
                console.print("\nüí° No provider generators available", style="dim")
            raise click.Abort()

        # Get provider generator
        generator_class = get_provider_generator(detected_provider)
        if not generator_class:
            console.print(f"‚ùå Provider '{detected_provider}' not available", style="red")
            available = list_available_providers()
            if available:
                console.print(f"\nüí° Available providers: {', '.join(available)}", style="dim")
            raise click.Abort()
        
        # Instantiate the generator
        generator = generator_class()

        console.print(f"üîç Using provider: {detected_provider}", style="cyan")

        # Determine which agents to generate
        agents_to_generate = []

        if role:
            # Generate single agent by role
            agent = AgentAdapter.get_by_role(db, project_id, role)
            if not agent:
                console.print(f"‚ùå Agent '{role}' not found in database", style="red")
                console.print("\nüí° Run 'apm agents list' to see available agents", style="dim")
                raise click.Abort()

            # Check if file exists (unless force)
            output_path = generator.get_output_path(role, project_path)
            if output_path.exists() and not force:
                console.print(f"‚úÖ Agent '{role}' already exists", style="green")
                console.print(f"   File: {output_path}", style="dim")
                console.print("\nüí° Use --force to regenerate", style="dim")
                return

            agents_to_generate = [agent]

        elif all:
            # Generate all agents
            agents_to_generate = AgentAdapter.list(db, project_id=project_id, active_only=False)

            if not agents_to_generate:
                console.print("‚ùå No agents in database", style="red")
                console.print("\nüí° Run database migrations to add default agents", style="dim")
                raise click.Abort()

        else:
            # Default: show status and prompt
            existing_agents = AgentAdapter.list(db, project_id=project_id)

            if not existing_agents:
                console.print("‚ùå No agents in database", style="red")
                console.print("\nüí° Run database migrations to add default agents", style="dim")
                raise click.Abort()

            # Count existing files
            existing_count = 0
            for agent in existing_agents:
                output_path = generator.get_output_path(agent.role, project_path)
                if output_path.exists():
                    existing_count += 1

            console.print(f"Found {len(existing_agents)} agents ({existing_count} files exist)")
            console.print("\nüí° Use --all to generate all agents or --role <name> for specific agent")
            return

        if not agents_to_generate:
            console.print("No agents to generate", style="yellow")
            return

        # Load project rules
        project_rules = RuleAdapter.list(db, project_id=project_id)

        console.print(f"\nüîç Generating {len(agents_to_generate)} agent(s)...", style="cyan")

        if dry_run:
            console.print("   [DRY RUN - No files will be written]", style="yellow")

        # Generate agents with progress bar
        results: List[GenerationResult] = []

        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            console=console
        ) as progress:

            task = progress.add_task(
                "Generating agents...",
                total=len(agents_to_generate)
            )

            for agent in agents_to_generate:
                progress.update(task, description=f"Generating {agent.role}...")

                # Create generation context
                context = GenerationContext(
                    agent=agent,
                    project_rules=project_rules,
                    project_path=project_path,
                )

                # Generate agent file
                result = generator.generate_agent_file(context)
                results.append(result)

                # Write file (unless dry run)
                if result.success and not dry_run:
                    result.output_path.parent.mkdir(parents=True, exist_ok=True)
                    result.output_path.write_text(result.content, encoding='utf-8')

                progress.advance(task)

        # Summary
        success_count = sum(1 for r in results if r.success)
        failure_count = len(results) - success_count

        if success_count > 0:
            console.print(f"\n‚úÖ Generated {success_count} agent file(s)", style="green bold")
            if not dry_run:
                console.print(f"üìÅ Location: {results[0].output_path.parent}", style="cyan")

        if failure_count > 0:
            console.print(f"\n‚ùå Failed to generate {failure_count} agent(s):", style="red")
            for result in results:
                if not result.success:
                    console.print(f"   ‚Ä¢ {result.agent_role}: {result.error}", style="red")

        # Show warnings
        warnings_count = sum(len(r.warnings) for r in results)
        if warnings_count > 0:
            console.print(f"\n‚ö†Ô∏è  {warnings_count} warning(s):", style="yellow")
            for result in results:
                for warning in result.warnings:
                    console.print(f"   ‚Ä¢ {result.agent_role}: {warning}", style="yellow")

        if dry_run:
            console.print("\nüí° Files shown above would be generated", style="dim")
        else:
            console.print(f"\nüí° Agents are ready to use via Task tool delegation", style="dim")

    except click.Abort:
        raise
    except Exception as e:
        console.print(f"\n‚ùå Error: {e}", style="red")
        import traceback
        traceback.print_exc()
        raise click.Abort()
