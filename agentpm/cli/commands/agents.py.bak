"""
Agents CLI Commands

Commands for agent generation and management.

Commands:
- apm agents generate [--force]  - Generate specialized agent files
- apm agents list                - List all agents
- apm agents show <role>         - Show agent details
- apm agents refresh             - Regenerate all agents

Pattern: Click command group with Rich output
"""

import click
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.table import Table
from pathlib import Path
import json

from ..utils.project import ensure_project_root, get_current_project_id
from ..utils.services import get_database_service
from ...core.database.models.agent import Agent
from ...core.agents.claude_integration import invoke_claude_code_headless
from ...core.agents.selection import AgentSelector
from datetime import datetime

console = Console()


@click.group()
def agents():
    """Manage AI agents for project"""
    pass


@agents.command()
@click.option('--force', is_flag=True, help='Regenerate even if agents exist')
@click.option('--use-claude', is_flag=True, help='Use real Claude Code AI (SLOW: ~1 min, higher quality)')
@click.pass_context
def generate(ctx: click.Context, force: bool, use_claude: bool):
    """
    Generate specialized agent files from base templates.

    \b
    Default (mock mode):
      - Fast: <1 second for all 15 agents
      - Good: Fills placeholders with project context
      - Recommended: For development and testing

    \b
    With --use-claude:
      - Slow: 45-60 seconds for all 15 agents (~3-4s each)
      - Better: AI-enhanced content, richer examples
      - Optional: Only if you want AI-generated enhancements

    \b
    Examples:
      apm agents generate                 # Fast mock mode (<1s)
      apm agents generate --use-claude    # Slow AI mode (~1min)
      apm agents generate --force         # Regenerate existing
    """
    try:
        # Find project
        project_root = ensure_project_root(ctx)
        db = get_database_service(project_root)
        project_id = get_current_project_id(ctx)

        # Get project name
        with db.connect() as conn:
            cursor = conn.execute("SELECT name FROM projects WHERE id = ?", (project_id,))
            row = cursor.fetchone()
            project_name = row[0] if row else "Project"

        # Check if agents already exist
        from ...core.database.methods import agents as agent_methods
        existing_agents = agent_methods.list_agents(db, project_id=project_id)

        if existing_agents and not force:
            console.print(f"‚úÖ Agents already generated ({len(existing_agents)} found)", style="green")
            console.print("\nüí° Use --force to regenerate", style="dim")
            return

        # Get tech stack from database (stored during apm init)
        console.print("\nüîç Loading project context...", style="cyan")

        with db.connect() as conn:
            cursor = conn.execute("""
                SELECT tech_stack, detected_frameworks
                FROM projects
                WHERE id = ?
            """, (project_id,))
            row = cursor.fetchone()

            import json
            tech_stack_json = row[0] if row and row[0] else '[]'
            frameworks_json = row[1] if row and row[1] else '[]'

            tech_stack = json.loads(tech_stack_json) if tech_stack_json != '[]' else []
            frameworks = json.loads(frameworks_json) if frameworks_json != '[]' else []

        if not tech_stack and not frameworks:
            console.print("‚ö†Ô∏è  No tech stack detected - using generic context", style="yellow")
            # Provide minimal but useful default
            tech_stack = [
                "Project (framework detection not run)",
                "Generic coding standards apply",
            ]

        # Merge tech_stack and frameworks
        all_tech = tech_stack + frameworks if frameworks else tech_stack

        project_context = {
            'business_domain': project_name,
            'app_type': 'Application',  # TODO: Detect from project structure
            'tech_stack': all_tech,
            'frameworks': frameworks,
            'languages': [],  # Will be detected by selector
            'testing_frameworks': [],  # TODO: Detect
            'patterns': ["Follow existing code patterns in project", "Maintain consistency with codebase"],
            'rules': ["Time-box implementation tasks", "Write tests for new code"],
            'code_examples': []
        }

        # Smart agent selection based on project
        selector = AgentSelector()
        selected_agents = selector.select_agents(project_context)

        console.print(f"üéØ Selected {len(selected_agents)} relevant agents (based on project tech)", style="cyan")

        # Load base templates
        from ...templates import agents as templates_pkg
        import importlib.resources

        template_dir = Path(importlib.resources.files(templates_pkg))

        if not template_dir.exists() or not template_dir.is_dir():
            console.print(f"‚ùå Templates directory not found: {template_dir}", style="red")
            raise click.Abort()

        # Generate agents with progress bar
        generated_count = 0

        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            console=console
        ) as progress:

            task = progress.add_task(
                f"Generating agents for {project_name}...",
                total=len(selected_agents)
            )

            # Output directory
            output_dir = project_root / ".claude" / "agents"
            output_dir.mkdir(parents=True, exist_ok=True)

            for agent_spec in selected_agents:
                agent_name = agent_spec['name']
                base_type = agent_spec['type']

                progress.update(task, description=f"Generating {agent_name}...")

                # Load base template for this archetype
                template_file = template_dir / f"{base_type}.md"
                if not template_file.exists():
                    console.print(f"‚ö†Ô∏è  Template not found: {base_type}.md", style="yellow")
                    progress.advance(task)
                    continue

                base_template = template_file.read_text()

                # Build specialized context for this agent
                agent_context = {
                    **project_context,
                    'agent_name': agent_name,
                    'specialization': agent_spec['specialization'],
                    'focus_areas': agent_spec['focus'],
                }

                # Fill template (mock or Claude)
                try:
                    filled_template = invoke_claude_code_headless(
                        base_template,
                        agent_context,
                        max_retries=3,
                        timeout_seconds=60,
                        use_mock=not use_claude
                    )
                except Exception as e:
                    console.print(f"‚ö†Ô∏è  Failed to generate {agent_name}: {e}", style="yellow")
                    progress.advance(task)
                    continue

                # Write to file
                output_file = output_dir / f"{agent_name}.md"
                output_file.write_text(filled_template)

                # Store in database
                agent = Agent(
                    project_id=project_id,
                    role=agent_name,
                    display_name=agent_spec['specialization'],
                    description=f"{agent_spec['specialization']} - {agent_spec['focus'][:100]}",
                    agent_type=base_type,
                    file_path=str(output_file.relative_to(project_root)),
                    generated_at=datetime.utcnow(),
                    sop_content=filled_template,
                    is_active=True
                )

                # Check if exists (for --force)
                existing = agent_methods.get_agent_by_role(db, project_id, agent_name)
                if existing:
                    agent_methods.update_agent(db, existing.id,
                                              file_path=agent.file_path,
                                              generated_at=agent.generated_at,
                                              sop_content=agent.sop_content,
                                              description=agent.description)
                else:
                    agent_methods.create_agent(db, agent)

                generated_count += 1
                progress.advance(task)

        # Summary
        console.print(f"\n‚úÖ Generated {generated_count}/{len(selected_agents)} agents", style="green bold")
        console.print(f"üìÅ Location: {output_dir.relative_to(project_root)}", style="cyan")
        console.print(f"\nüí° Agents are ready to use via Claude Code sub-agent system", style="dim")

    except click.Abort:
        raise
    except Exception as e:
        console.print(f"\n‚ùå Error: {e}", style="red")
        raise click.Abort()


@agents.command('list')
@click.option('--active-only', is_flag=True, help='Show only active agents')
@click.pass_context
def list_agents_cmd(ctx: click.Context, active_only: bool):
    """List all agents in project"""
    try:
        project_root = ensure_project_root(ctx)
        db = get_database_service(project_root)
        project_id = get_current_project_id(ctx)

        # List agents
        from ...core.database.methods import agents as agent_methods
        agents_list = agent_methods.list_agents(db, project_id=project_id, active_only=active_only)

        if not agents_list:
            console.print("No agents found. Run 'apm agents generate' first.", style="yellow")
            return

        # Display table
        table = Table(title=f"Agents ({len(agents_list)} total)")
        table.add_column("Role", style="cyan")
        table.add_column("Display Name", style="green")
        table.add_column("Status", style="yellow")
        table.add_column("Generated", style="dim")

        for agent in agents_list:
            status = "üü¢ Active" if agent.is_active else "‚ö´ Inactive"
            generated = agent.generated_at.strftime("%Y-%m-%d") if agent.generated_at else "Never"

            table.add_row(
                agent.role,
                agent.display_name,
                status,
                generated
            )

        console.print(table)

    except click.Abort:
        raise
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        raise click.Abort()


@agents.command()
@click.argument('role')
@click.pass_context
def show(ctx: click.Context, role: str):
    """Show details for specific agent"""
    try:
        project_root = ensure_project_root(ctx)
        db = get_database_service(project_root)
        project_id = get_current_project_id(ctx)

        # Get agent
        from ...core.database.methods import agents as agent_methods
        agent = agent_methods.get_agent_by_role(db, project_id, role)

        if not agent:
            console.print(f"‚ùå Agent '{role}' not found", style="red")
            console.print("\nüí° Run 'apm agents list' to see available agents", style="dim")
            raise click.Abort()

        # Display details
        console.print(f"\n[bold cyan]{agent.display_name}[/bold cyan]")
        console.print(f"Role: {agent.role}")
        console.print(f"Type: {agent.agent_type or 'Unknown'}")
        console.print(f"Status: {'üü¢ Active' if agent.is_active else '‚ö´ Inactive'}")

        if agent.file_path:
            console.print(f"File: {agent.file_path}")

        if agent.generated_at:
            age_days = (datetime.utcnow() - agent.generated_at).days
            console.print(f"Generated: {agent.generated_at.strftime('%Y-%m-%d')} ({age_days} days ago)")

            if agent.is_stale():
                console.print("‚ö†Ô∏è  [yellow]Agent is stale (>7 days) - consider refresh[/yellow]")

        if agent.description:
            console.print(f"\nDescription: {agent.description}")

    except click.Abort:
        raise
    except Exception as e:
        console.print(f"‚ùå Error: {e}", style="red")
        raise click.Abort()
