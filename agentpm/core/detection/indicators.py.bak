"""Project indicator datasets shared across plugins and services."""

from typing import Any, Dict, List, Optional


class ProjectIndicators:
    """Centralized registry for project detection indicators and hint datasets."""

    CONFIG_FILES: Dict[str, List[str]] = {
        "python": [
            "pyproject.toml",
            "setup.py",
            "setup.cfg",
            "requirements.txt",
            "Pipfile",
            "poetry.lock",
        ],
        "javascript": [
            "package.json",
            "package-lock.json",
            "yarn.lock",
            "pnpm-lock.yaml",
        ],
        "typescript": ["tsconfig.json", "package.json", "package-lock.json"],
        "java": ["pom.xml", "build.gradle", "gradle.properties", "build.xml"],
        "go": ["go.mod", "go.sum", "Gopkg.toml", "Gopkg.lock"],
        "rust": ["Cargo.toml", "Cargo.lock"],
        "php": ["composer.json", "composer.lock"],
        "ruby": ["Gemfile", "Gemfile.lock", "gemspec"],
        "infrastructure": [
            "Dockerfile",
            "docker-compose.yml",
            "k8s.yml",
            "deployment.yml",
        ],
        "ci_cd": [
            ".github/workflows/",
            ".gitlab-ci.yml",
            "Jenkinsfile",
            ".travis.yml",
            "circle.yml",
        ],
    }

    STRUCTURE_INDICATORS: Dict[str, List[str]] = {
        "source": ["src/", "lib/", "app/", "source/"],
        "tests": ["tests/", "test/", "__tests__/", "spec/"],
        "docs": ["docs/", "documentation/", "wiki/"],
        "config": ["config/", "conf/", "settings/"],
        "build": ["build/", "dist/", "target/", "bin/"],
        "assets": ["assets/", "static/", "public/", "resources/"],
    }

    LANGUAGE_EXTENSIONS: Dict[str, List[str]] = {
        "python": [".py", ".pyw", ".pyi"],
        "javascript": [".js", ".jsx", ".mjs", ".cjs"],
        "typescript": [".ts", ".tsx", ".d.ts"],
        "java": [".java", ".jar", ".war"],
        "kotlin": [".kt", ".kts"],
        "swift": [".swift"],
        "go": [".go"],
        "rust": [".rs"],
        "php": [".php", ".phtml"],
        "ruby": [".rb", ".gemspec"],
        "html": [".html", ".htm"],
        "css": [".css"],
        "scss": [".scss"],
        "sass": [".sass"],
        "less": [".less"],
        "shell": [".sh", ".bash", ".zsh", ".fish", ".bat"],
        # "sql": [".sql"],  # Removed - SQL files handled by database-specific plugins (SQLite, PostgreSQL, MySQL)
        "yaml": [".yml", ".yaml"],
        "json": [".json"],
        "xml": [".xml"],
        "markdown": [".md", ".markdown"],
        "cpp": [".cpp", ".cc", ".cxx", ".hpp", ".hh", ".hxx"],
        "c": [".c", ".h"],
        "csharp": [".cs"],
        "scala": [".scala"],
        "r": [".r"],
        "dart": [".dart"],
        "lua": [".lua"],
        "perl": [".pl"],
        "powershell": [".ps1"],
        "objective_c": [".m"],
        "objective_cpp": [".mm"],
        "vue": [".vue"],
        "svelte": [".svelte"],
    }

    LANGUAGE_DISPLAY_NAMES: Dict[str, str] = {
        "python": "Python",
        "javascript": "JavaScript",
        "typescript": "TypeScript",
        "java": "Java",
        "kotlin": "Kotlin",
        "swift": "Swift",
        "go": "Go",
        "rust": "Rust",
        "php": "PHP",
        "ruby": "Ruby",
        "html": "HTML",
        "css": "CSS",
        "scss": "SCSS",
        "sass": "Sass",
        "less": "Less",
        "shell": "Shell",
        "sql": "SQL",
        "yaml": "YAML",
        "json": "JSON",
        "xml": "XML",
        "markdown": "Markdown",
        "cpp": "C++",
        "c": "C",
        "csharp": "C#",
        "scala": "Scala",
        "r": "R",
        "dart": "Dart",
        "lua": "Lua",
        "perl": "Perl",
        "powershell": "PowerShell",
        "objective_c": "Objective-C",
        "objective_cpp": "Objective-C++",
        "vue": "Vue",
        "svelte": "Svelte",
    }

    FRAMEWORK_INDICATORS: Dict[str, List[str]] = {
        "django": ["manage.py", "settings.py", "urls.py", "wsgi.py", "asgi.py"],
        "flask": ["app.py", "application.py", "run.py"],
        "fastapi": [],  # FastAPI detection via requirements.txt only (main.py/app.py too generic)
        "react": ["package.json", "public/index.html", "src/index.js", "src/App.js"],
        "vue": ["vue.config.js", "src/main.js", "src/App.vue"],
        "angular": ["angular.json", "src/main.ts", "src/app/app.module.ts"],
        "spring": ["pom.xml", "application.properties", "application.yml"],
        "express": ["server.js", "app.js", "express"],  # More specific: require actual Express files or Express dependency
        "nextjs": ["next.config.js", "pages/", "app/"],
        "gatsby": ["gatsby-config.js", "gatsby-node.js"],
        "nuxt": ["nuxt.config.js", "pages/"],
        "svelte": ["svelte.config.js", "src/App.svelte"],
        # Hypermedia and reactive frameworks
        "htmx": [],  # Detected via HTML attribute scanning (hx-*)
        "alpine": [],  # Detected via HTML attribute scanning (x-*)
        # CSS frameworks
        "tailwind": ["tailwind.config.js", "tailwind.config.ts", "tailwind.config.cjs"],
    }

    FRAMEWORK_HINTS: Dict[str, List[str]] = {
        "python": ["django", "flask", "fastapi"],
        "javascript": ["react", "vue", "angular", "express", "nextjs"],
        "typescript": ["angular", "react", "nextjs"],
        "java": ["spring"],
        "php": ["laravel", "symfony"],
        "ruby": ["rails", "sinatra"],
        "go": ["gin", "echo", "fiber"],
        "rust": ["actix", "rocket", "axum"],
    }

    LANGUAGE_INDICATORS: Dict[str, Dict[str, Dict[str, float]]] = {
        "python": {
            "extensions": {".py": 1.0},
            "files": {
                "setup.py": 0.9,
                "pyproject.toml": 0.8,
                "requirements.txt": 0.7,
                "pipfile": 0.6,
            },
            "directories": {"__pycache__": 0.3, ".venv": 0.2, "venv": 0.2},
        },
        "javascript": {
            "extensions": {".js": 0.9, ".jsx": 0.9, ".ts": 0.9, ".tsx": 0.9},
            "files": {
                "package.json": 0.9,
                "package-lock.json": 0.5,
                "yarn.lock": 0.5,
            },
            "directories": {"node_modules": 0.8, ".next": 0.4, "dist": 0.2},
        },
        "java": {
            "extensions": {".java": 1.0},
            "files": {
                "pom.xml": 0.8,
                "build.gradle": 0.8,
                "gradle.properties": 0.6,
            },
            "directories": {"src/main/java": 0.9, "target": 0.3, ".gradle": 0.3},
        },
        "go": {
            "extensions": {".go": 1.0},
            "files": {"go.mod": 0.9, "go.sum": 0.8},
            "directories": {"vendor": 0.4},
        },
        "rust": {
            "extensions": {".rs": 1.0},
            "files": {"cargo.toml": 0.9, "cargo.lock": 0.8},
            "directories": {"target": 0.4, "src": 0.3},
        },
    }

    PROJECT_TYPE_INDICATORS: Dict[str, Dict[str, List[str]]] = {
        "Web Application": {
            "files": [
                "package.json",
                "index.html",
                "src/App.js",
                "src/App.jsx",
                "src/App.tsx",
                "public/index.html",
            ],
            "folders": ["public", "src", "static", "templates"],
            "patterns": ["react", "vue", "angular", "django", "flask", "express"],
        },
        "Mobile App": {
            "files": ["pubspec.yaml", "ios/", "android/", "App.js", "package.json"],
            "folders": ["ios", "android", "lib"],
            "patterns": ["flutter", "react-native", "ionic", "xamarin"],
        },
        "API/Backend Service": {
            "files": ["requirements.txt", "go.mod", "Cargo.toml", "pom.xml"],
            "folders": ["api", "handlers", "controllers", "routes", "endpoints"],
            "patterns": ["fastapi", "gin", "express", "spring"],
        },
        "Library/Package": {
            "files": ["setup.py", "pyproject.toml", "Cargo.toml", "package.json"],
            "folders": ["src", "lib", "pkg"],
            "patterns": ["library", "package", "module"],
        },
        "Data Science/ML": {
            "files": ["requirements.txt", "environment.yml", "conda.yml"],
            "folders": ["data", "notebooks", "models", "experiments"],
            "patterns": ["jupyter", "pandas", "tensorflow", "pytorch", "sklearn"],
        },
        "Desktop Application": {
            "files": ["main.py", "main.go", "main.cpp", "main.java"],
            "folders": ["gui", "ui", "desktop"],
            "patterns": ["tkinter", "qt", "gtk", "electron", "tauri"],
        },
    }

    LANGUAGE_DATABASE_HINTS: Dict[str, List[str]] = {
        "python": ["postgresql", "sqlite", "mongodb"],
        "javascript": ["mongodb", "postgresql", "redis"],
        "java": ["postgresql", "mysql", "mongodb"],
        "php": ["mysql", "postgresql"],
        "ruby": ["postgresql", "mysql"],
        "go": ["postgresql", "mongodb", "redis"],
        "rust": ["postgresql", "sqlite"],
    }

    LANGUAGE_TESTING_HINTS: Dict[str, List[str]] = {
        "python": ["pytest", "unittest"],
        "javascript": ["jest", "mocha"],
        "typescript": ["jest", "mocha"],
        "java": ["junit"],
        "go": ["testing"],
        "rust": ["cargo-test"],
        "php": ["phpunit"],
        "ruby": ["rspec", "minitest"],
    }

    ARCHITECTURE_HINTS: Dict[str, List[str]] = {
        "simple": ["simple"],
        "standard": ["mvc", "layered"],
        "complex": ["hexagonal", "clean", "microservices"],
    }

    DATABASE_INDICATORS: Dict[str, List[str]] = {
        "postgresql": ["postgresql", "psycopg2", "pg", "postgres"],
        "mysql": ["mysql", "pymysql", "mysql2"],
        "sqlite": ["sqlite3", "sqlite", "better-sqlite3"],
        "mongodb": ["mongodb", "pymongo", "mongoose"],
        "redis": ["redis", "redis-py", "ioredis"],
        "elasticsearch": ["elasticsearch", "elasticsearch-py"],
        "firebase": ["firebase", "firebase-admin"],
    }

    TESTING_INDICATORS: Dict[str, List[str]] = {
        "pytest": ["pytest.ini", "pyproject.toml", "setup.cfg"],
        "unittest": ["test_*.py", "*_test.py"],
        "jest": ["jest.config.js", "package.json"],
        "mocha": ["mocha.opts", ".mocharc.json"],
        "jasmine": ["jasmine.json", "spec/"],
        "cypress": ["cypress.json", "cypress/"],
        "selenium": ["webdriver", "selenium"],
    }

    INFRASTRUCTURE_INDICATORS: Dict[str, List[str]] = {
        "docker": ["Dockerfile", "docker-compose.yml", ".dockerignore"],
        "kubernetes": ["k8s/", "kubernetes/", "*.yaml", "*.yml"],
        "terraform": ["*.tf", "terraform/"],
        "ansible": ["playbook.yml", "ansible/"],
        "vagrant": ["Vagrantfile"],
        "heroku": ["Procfile", "runtime.txt"],
        "aws": ["serverless.yml", "template.yaml", "sam.yaml"],
        "vercel": ["vercel.json", "now.json"],
        "netlify": ["netlify.toml", "_redirects"],
    }

    DEFAULT_INFRASTRUCTURE_HINTS: List[str] = ["docker"]

    # Technology Dependencies - Dependency-based confidence boosting
    # Format: {child_tech: [(parent_tech, boost_strategy), ...]}
    # boost_strategy: 'match' (child confidence = parent confidence) or float multiplier
    # Example: Django 100% → Python becomes 100% (can't have Django without Python)
    TECHNOLOGY_DEPENDENCIES: Dict[str, List[tuple[str, str | float]]] = {
        # Python frameworks → Python language (HARD dependency - match confidence)
        'django': [('python', 'match')],      # Django 100% → Python 100%
        'flask': [('python', 'match')],       # Flask 100% → Python 100%
        'fastapi': [('python', 'match')],     # FastAPI 100% → Python 100%
        'click': [('python', 'match')],       # Click 85% → Python 85% (if higher)

        # Python testing → Python language (SOFT dependency - boost by percentage)
        'pytest': [('python', 0.10)],      # pytest 70% → Python +7%
        'unittest': [('python', 0.08)],    # unittest → Python +8%

        # JavaScript frameworks → JavaScript (HARD dependency)
        'react': [('javascript', 'match')],
        'vue': [('javascript', 'match')],
        'express': [('javascript', 'match')],
        'nextjs': [('javascript', 'match'), ('react', 0.10)],  # Boosts both

        # Hypermedia frameworks (no hard language dependency - progressive enhancement)
        # HTMX and Alpine work with any backend (Django, Flask, Express, etc.)
        'htmx': [],  # No dependencies
        'alpine': [],  # No dependencies
        'tailwind': [],  # CSS framework, no hard dependencies

        # TypeScript relationship with JavaScript
        'typescript': [('javascript', 0.10)],  # TypeScript is JavaScript superset (soft boost)

        # TypeScript frameworks → TypeScript (HARD dependency)
        'angular': [('typescript', 'match')],
        'react': [('typescript', 0.15)],  # React often used with TypeScript (soft boost)

        # Java frameworks → Java (HARD dependency)
        'spring': [('java', 'match')],

        # Go frameworks → Go (HARD dependency)
        'gin': [('go', 'match')],
        'echo': [('go', 'match')],

        # Rust frameworks → Rust (HARD dependency)
        'actix': [('rust', 'match')],
        'rocket': [('rust', 'match')],
    }

    @classmethod
    def get_config_files(cls, category: Optional[str] = None) -> List[str]:
        """Return configuration files for a category or all categories."""
        if category:
            return cls.CONFIG_FILES.get(category, [])
        return [file for files in cls.CONFIG_FILES.values() for file in files]

    @classmethod
    def get_language_extensions(cls, language: Optional[str] = None) -> List[str]:
        """Return file extensions for a language or all languages."""
        if language:
            return cls.LANGUAGE_EXTENSIONS.get(language, [])
        return [ext for exts in cls.LANGUAGE_EXTENSIONS.values() for ext in exts]

    @classmethod
    def get_language_indicator_map(
        cls, language: Optional[str] = None
    ) -> Dict[str, Dict[str, Dict[str, float]]]:
        """Return weighted language indicators for fast detection."""
        if language:
            indicators = cls.LANGUAGE_INDICATORS.get(language)
            return {language: indicators} if indicators else {}
        return cls.LANGUAGE_INDICATORS

    @classmethod
    def get_framework_indicators(cls, framework: Optional[str] = None) -> List[str]:
        """Return framework indicator files for a framework or all frameworks."""
        if framework:
            return cls.FRAMEWORK_INDICATORS.get(framework, [])
        return [
            indicator
            for indicators in cls.FRAMEWORK_INDICATORS.values()
            for indicator in indicators
        ]

    @classmethod
    def get_framework_hints_for_language(cls, language: str) -> List[str]:
        """Return likely frameworks for a detected language."""
        return cls.FRAMEWORK_HINTS.get(language, [])

    @classmethod
    def get_complexity_indicators(cls) -> Dict[str, List[str]]:
        """Return indicators used for complexity assessment."""
        return {
            "config_files": cls.get_config_files(),
            "structure_dirs": [d for dirs in cls.STRUCTURE_INDICATORS.values() for d in dirs],
            "framework_files": cls.get_framework_indicators(),
        }

    @classmethod
    def get_language_for_extension(cls, extension: str) -> Optional[str]:
        """Return the primary language identifier for a file extension."""
        extension = extension.lower()
        for language, extensions in cls.LANGUAGE_EXTENSIONS.items():
            if extension in extensions:
                return language
        return None

    @classmethod
    def get_language_display_name(cls, language: str) -> str:
        """Return a human-friendly display name for a language key."""
        return cls.LANGUAGE_DISPLAY_NAMES.get(language, language.title())

    @classmethod
    def get_project_type_indicators(
        cls, project_type: Optional[str] = None
    ) -> Dict[str, Dict[str, List[str]]]:
        """Return indicator datasets for project type classification."""
        if project_type:
            indicators = cls.PROJECT_TYPE_INDICATORS.get(project_type)
            return {project_type: indicators} if indicators else {}
        return cls.PROJECT_TYPE_INDICATORS

    @classmethod
    def get_database_hints(cls, language: Optional[str] = None) -> List[str]:
        """Return suggested databases for a language or all suggestions."""
        if language:
            return cls.LANGUAGE_DATABASE_HINTS.get(language, [])
        return [hint for hints in cls.LANGUAGE_DATABASE_HINTS.values() for hint in hints]

    @classmethod
    def get_testing_hints(cls, language: Optional[str] = None) -> List[str]:
        """Return suggested testing frameworks for a language or all suggestions."""
        if language:
            return cls.LANGUAGE_TESTING_HINTS.get(language, [])
        return [hint for hints in cls.LANGUAGE_TESTING_HINTS.values() for hint in hints]

    @classmethod
    def get_architecture_hints(cls, complexity: Optional[str] = None) -> List[str]:
        """Return architecture pattern hints by project complexity."""
        if complexity:
            return cls.ARCHITECTURE_HINTS.get(complexity, [])
        return [hint for hints in cls.ARCHITECTURE_HINTS.values() for hint in hints]

    @classmethod
    def validate_indicators(cls) -> Dict[str, Any]:
        """Validate baseline indicator integrity for debugging and analytics."""
        validation_report = {
            "total_config_files": len(cls.get_config_files()),
            "total_extensions": len(cls.get_language_extensions()),
            "total_frameworks": len(cls.FRAMEWORK_INDICATORS),
            "languages_supported": len(cls.LANGUAGE_EXTENSIONS),
            "duplicates_found": [],
            "missing_categories": [],
        }

        all_configs: List[str] = []
        for category, configs in cls.CONFIG_FILES.items():
            for config in configs:
                if config in all_configs:
                    validation_report["duplicates_found"].append(
                        f"Config file '{config}' duplicated"
                    )
                else:
                    all_configs.append(config)

        return validation_report
