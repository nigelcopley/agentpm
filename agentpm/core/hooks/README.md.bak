# AIPM Hooks System

**Version**: 1.0.0
**Status**: Production Ready (Phase 1)

## Overview

AIPM hooks integrate with Claude Code to provide seamless session continuity, context injection, and workflow guidance. This directory contains production-ready hook implementations that can be installed to `.claude/hooks/` for automatic activation.

## Directory Structure

```
agentpm/hooks/
├── README.md                    # This file
├── implementations/             # Production hook implementations
│   ├── session-start.py         # Load context on session start
│   ├── session-end.py           # Save summary on session end
│   ├── user-prompt-submit.py    # Inject context on entity mentions
│   ├── pre-tool-use.py          # Proactive guidance before tools
│   ├── post-tool-use.py         # Reactive feedback after tools
│   ├── pre-compact.py           # Context preservation priorities
│   ├── stop.py                  # Session interruption handling
│   └── subagent-stop.py         # Sub-agent completion tracking
├── templates/                   # Hook templates for customization
└── __init__.py                  # Package marker
```

## Exit Code Semantics

All AIPM hooks use severity-based exit codes to control Claude Code integration:

| Exit Code | Behavior | Use Case | Claude Code Response |
|-----------|----------|----------|---------------------|
| **0** | Silent success | Informational guidance, routine confirmations | Not shown to model or user |
| **1** | Warning | Important feedback, workflow reminders | Show stderr to model, allow continuation |
| **2** | Blocking error | Critical violations, security issues | Show stderr to model, BLOCK tool execution |

**Philosophy**: Graduated feedback enables:
- **Noise reduction**: Routine info stays silent (Exit 0)
- **Quality preservation**: Critical reminders shown (Exit 1)
- **Security enforcement**: Violations blocked (Exit 2)

**Hook-Specific Strategies**:
- **pre-tool-use.py**: Uses all three exit codes (0/1/2) for preventive validation
- **post-tool-use.py**: Uses Exit 0/1 only (reactive feedback, cannot block completed actions)
- **user-prompt-submit.py**: Primarily Exit 0 (passive enrichment, Exit 1 only for infrastructure failures)
- **session-start/end.py**: Exit 0 only (lifecycle hooks, no validation needed)

## Hook Inventory

### Phase 1: Essential Hooks (MVP - Deploy First)

#### 1. SessionStart (`session-start.py`)
**Priority**: HIGH
**Performance**: ~180ms
**Purpose**: Load AIPM context when Claude Code session begins

**Features**:
- Loads NEXT-SESSION.md handover from previous session
- Shows active work items and tasks from database
- Injects workflow reminders and quick commands
- Graceful degradation if database unavailable

**Impact**: Eliminates "where was I?" questions

#### 2. SessionEnd (`session-end.py`)
**Priority**: HIGH
**Performance**: ~220ms
**Purpose**: Generate session handover for next session

**Features**:
- Auto-generates NEXT-SESSION.md in project root
- Captures active work items/tasks from database
- Records uncommitted changes (git status)
- Shows recent commits for context
- Includes quick-start commands

**Impact**: Perfect handover between sessions

#### 3. UserPromptSubmit (`user-prompt-submit.py`)
**Priority**: HIGH
**Performance**: ~60ms
**Purpose**: Inject relevant context when user mentions entities

**Features**:
- Regex pattern matching for WI-XX, Task #XX references
- Database queries for entity details
- Workflow keyword detection (start, commit, test, etc.)
- Dependency/blocker status injection

**Impact**: No need to manually run `apm task show`

**Exit Code Strategy** (Primarily Exit 0 - passive enrichment):

**Exit 0 - Silent Success** (All scenarios):
- Work item found → Context injected
- Work item NOT found → Silent failure (user might be speculating)
- Task found → Context injected
- Task NOT found → Silent failure (let Claude handle naturally)
- Workflow keywords detected → Informational guidance

**Exit 1 - Warning** (Infrastructure failures only):
- Database connection failure
- JSON parse error (protocol violation)

**Design Rationale**:
- **Passive Enrichment**: Best-effort context injection, not validation
- **Conversational UX**: Silent entity lookup failures enable natural conversation
- **Non-Blocking**: User references might be speculative ("Like WI-27") or from memory
- **Contrast with pre-tool-use**: Preventive hooks warn on missing context; passive enrichment stays silent

---

### Phase 2: Enhancement Hooks (Deploy After 1 Week)

#### 4. PreToolUse (`pre-tool-use.py`)
**Priority**: MEDIUM
**Performance**: ~30ms
**Purpose**: Proactive guidance before tool execution

**Features**:
- **Security**: Detects ANY path outside project root (GR-007)
- **Safety**: Warns about destructive commands
- **Workflow**: AIPM workflow reminders
- **Patterns**: Database pattern reminders for code edits

**Impact**: Creates guardrails without blocking

**Exit Code Strategy** (Uses all three: 0/1/2):

**Exit 0 - Silent Informational**:
- Database pattern reminder (shown once per session)
- Workflow context injection (non-critical)
- Routine safety confirmations

**Exit 1 - Warning (Show but Allow)**:
- Commit frequency reminder (>90 min without commit)
- Test file modifications (run tests before committing)
- Destructive command warnings (with safe alternatives)

**Exit 2 - Blocking Error (GR-007 Security)**:
- Absolute paths (`/usr/local`, `/var/lib`)
- Home directory operations (`~/`, `cd ~`)
- Parent directory traversal (`../../../etc`)
- Provides educational warning with fix commands

**Security Enhancement (GR-007)**:
- Detects absolute paths (`/usr/local`)
- Detects home directory paths (`~/`)
- Detects parent directory traversal (`../..`)
- Provides educational warnings with safe alternatives

#### 5. PostToolUse (`post-tool-use.py`)
**Priority**: MEDIUM
**Performance**: ~25ms
**Purpose**: Reactive feedback after tool execution

**Features**:
- Commit encouragement and best practices
- Task transition guidance
- Test execution feedback (passed/failed)
- Next-step recommendations after code changes

**Impact**: Reinforces good workflow habits

**Exit Code Strategy** (Uses 0/1 only - reactive, cannot block):

**Exit 0 - Silent Informational**:
- Task started confirmation (avoid noise)
- Git commit success (routine positive feedback)
- Tests passing confirmation (expected outcome)

**Exit 1 - Warning (Important Feedback)**:
- Task completed/submitted → Reminder about independent review (agent separation principle)
- Tests failed → "Never skip tests" workflow guidance (critical quality gate)
- Core code modified → 3-step workflow reminder (test → run → commit)

**Exit 2 - Not Applicable**:
- Post-tool-use is reactive (tool already executed)
- Cannot block actions that already happened
- Blocking only appropriate in pre-tool-use (preventive)

#### 6. PreCompact (`pre-compact.py`)
**Priority**: MEDIUM
**Performance**: ~40ms
**Purpose**: Context preservation when approaching token limit

**Features**:
- Detects context usage percentage
- Injects preservation priorities
- Marks critical state to preserve

**Impact**: Maintains workflow continuity near limits

---

### Phase 3: Future Enhancement Hooks (Optional)

#### 7. Stop (`stop.py`)
**Priority**: LOW
**Purpose**: Handle session interruption (Ctrl+C, crash)

#### 8. SubagentStop (`subagent-stop.py`)
**Priority**: LOW
**Purpose**: Track sub-agent completion and analytics

---

## Installation

### Automatic Installation (Recommended)

```bash
# Install all Phase 1 hooks (SessionStart, SessionEnd, UserPromptSubmit)
apm hooks install

# Install specific hooks
apm hooks install --hooks session-start,session-end

# Install all hooks including Phase 2/3
apm hooks install --all
```

### Manual Installation

```bash
# Create hooks directory if it doesn't exist
mkdir -p .claude/hooks

# Copy desired hooks
cp agentpm/hooks/implementations/session-start.py .claude/hooks/
cp agentpm/hooks/implementations/session-end.py .claude/hooks/
cp agentpm/hooks/implementations/user-prompt-submit.py .claude/hooks/

# Set executable permissions
chmod +x .claude/hooks/*.py
```

### Verification

```bash
# Check installed hooks
ls -la .claude/hooks/

# Test a hook manually
echo '{"session_id": "test"}' | .claude/hooks/session-start.py
```

---

## Configuration

Hooks are configured in `.claude/config.json`:

```json
{
  "hooks": {
    "session-start": true,
    "session-end": true,
    "user-prompt-submit": true,
    "pre-tool-use": false,
    "post-tool-use": false
  }
}
```

**Note**: Configuration is managed by Claude Code, not AIPM.

---

## Hook Architecture

### Common Pattern

All hooks follow this structure:

```python
#!/usr/bin/env python3
"""Hook description"""

import json
import sys
from pathlib import Path

# Import AIPM modules
PROJECT_ROOT = Path(__file__).parent.parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

from agentpm.core.database import DatabaseService


def read_hook_input() -> dict:
    """Read JSON from stdin"""
    return json.loads(sys.stdin.read())


def format_output(...) -> str:
    """Generate context to inject"""
    # Hook-specific logic
    return result


def main():
    try:
        hook_data = read_hook_input()
        output = format_output(...)
        print(output)  # stdout → injected into Claude
        sys.exit(0)
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)  # stderr → log only
        sys.exit(1)


if __name__ == "__main__":
    main()
```

### Design Principles

1. **Fast**: All hooks <200ms (users are waiting)
2. **Safe**: Graceful degradation on errors
3. **Minimal**: 1-5 lines of injected text (avoid pollution)
4. **Educational**: Explain WHY, not just WHAT
5. **Severity-Based Guidance**: Graduate feedback by importance (Exit 0 silent, Exit 1 warning, Exit 2 blocking)
6. **Non-Blocking by Default**: Guide, don't prevent (except Exit 2 in pre-tool-use for critical security violations)

### stdout vs stderr

- **stdout**: Injected into Claude's context (user sees this)
- **stderr**: Logging only (debugging, not shown to Claude)

---

## Testing

### Manual Testing

```bash
# Test SessionStart hook
echo '{"session_id": "test-123"}' | .claude/hooks/session-start.py

# Test with work item reference
echo '{"prompt": "Show me WI-27", "session_id": "test"}' | .claude/hooks/user-prompt-submit.py

# Test security boundary check
echo '{"tool_name": "Bash", "parameters": {"command": "cd /tmp"}}' | .claude/hooks/pre-tool-use.py
```

### Integration Testing

```bash
# Full Claude Code session test
# 1. Start Claude Code (should see SessionStart context)
# 2. Mention "WI-27" in prompt (should see entity context)
# 3. Try command with /tmp (should see security warning)
# 4. Exit session (should generate NEXT-SESSION.md)
```

---

## Troubleshooting

### Hook Not Executing

1. **Check executable permissions**: `chmod +x .claude/hooks/*.py`
2. **Check Python path**: `which python3`
3. **Check imports**: `python3 .claude/hooks/session-start.py`
4. **Check Claude Code config**: `.claude/config.json`

### Database Access Errors

Hooks access `PROJECT_ROOT/.agentpm/data/agentpm.db`:

```python
# If database doesn't exist or is locked:
# - Hooks should gracefully degrade
# - Check stderr logs for error messages
# - Verify database file exists and is readable
```

### Performance Issues

```bash
# Time a hook execution
time echo '{}' | .claude/hooks/session-start.py

# Expected: <500ms
# If slower: Check database size, query optimization
```

---

## Customization

### Creating Custom Hooks

1. Copy a hook template from `templates/`
2. Modify the `format_output()` function
3. Test thoroughly
4. Deploy to `.claude/hooks/`

### Hook Priorities

Customize which hooks run:

```bash
# Phase 1 only (conservative)
apm hooks install --phase 1

# Phase 1 + 2 (recommended after validation)
apm hooks install --phase 2

# All hooks (power users)
apm hooks install --all
```

---

## Performance Metrics

| Hook | Avg Time | Token Usage | Priority |
|------|----------|-------------|----------|
| SessionStart | 180ms | ~1000 | HIGH |
| SessionEnd | 220ms | 0 (file) | HIGH |
| UserPromptSubmit | 60ms | ~200 | HIGH |
| PreToolUse | 30ms | ~100 | MEDIUM |
| PostToolUse | 25ms | ~100 | MEDIUM |
| PreCompact | 40ms | ~150 | MEDIUM |
| Stop | 10ms | ~50 | LOW |
| SubagentStop | 15ms | ~80 | LOW |

**All within acceptable limits** (<200ms for critical path)

---

## Security: GR-007 Integration

PreToolUse hook enforces **Governance Rule GR-007: Security Boundaries**

### Rule Statement
All operations must occur within project root. Operations targeting system directories (/tmp, ~/, etc.) are prohibited.

### Implementation

```python
def is_outside_project_root(command: str) -> bool:
    """Detect ANY path outside project root"""
    # Checks for:
    # - Absolute paths: /usr/local, /var
    # - Home directory: ~/
    # - Traversal: ../..
    return detected
```

### Detection Examples

✅ **Catches**:
- `cd /tmp` → /tmp is outside project
- `mkdir ~/test` → home directory
- `cd ../../../etc` → parent traversal

❌ **Allows**:
- `mkdir testing/test` → project-relative
- `cd .agentpm/temp` → within project
- `pytest tests/` → safe relative path

### Warning Format

```
🚨 Security Boundary Warning
Command targets path outside project root: `cd /tmp`

AIPM Security Rule GR-007: All operations stay within project root
- Testing: Use `testing/` directory (version controlled)
- Temporary files: Use `.agentpm/temp/` (gitignored)

Why: Operations outside project root:
- Not version controlled (lost on system events)
- Not reproducible (other developers can't run)
- Security risk (potential information leakage)

Fix: Use project-relative paths instead
```

---

## Documentation

**Complete Documentation**:
- Spike Report: `docs/artifacts/deliverables/claude-code-hooks-spike-report.md`
- Implementation Details: `docs/artifacts/analysis/hooks-spike-session-lifecycle.md`
- Security Enhancement: Section in spike report

**Related Rules**:
- GR-007: Security Boundaries (enforced by PreToolUse hook)
- CI-005: Secure Practices (broader security standards)

---

## Deployment History

**v1.0.0** (2025-10-08):
- Initial release with 8 production-ready hooks
- Phase 1/2/3 prioritization established
- GR-007 security boundary enforcement
- Comprehensive testing and documentation

---

## Support

**Issues**: Report in APM (Agent Project Manager) issue tracker
**Questions**: See spike report and analysis docs
**Customization**: Check templates/ directory

---

**Status**: Production Ready
**Last Updated**: 2025-10-10
**Maintainer**: AIPM Development Team

---

## Session Management Integration

**Status**: ✅ Production Ready (WI-35)

### Overview

SessionStart and SessionEnd hooks integrate with AIPM's session management database to provide:
- Automatic session tracking across Claude Code usage
- Persistent work history for analytics and productivity insights
- Session handover via NEXT-SESSION.md generation
- Current session tracking for agent context

### Database Integration

**SessionStart Hook** (`session-start.py`):
1. Reads session_id from Claude Code input JSON
2. Creates Session record in database with:
   - `tool_name=claude-code`
   - `llm_model=claude-sonnet-4-5` (from environment)
   - `start_time=now()`
   - `developer_name/email` (from git config)
3. Sets current session: `.agentpm/data/current_session.txt`
4. Injects session context into Claude's initial prompt

**SessionEnd Hook** (`session-end.py`):
1. Retrieves current session from `.agentpm/data/current_session.txt`
2. Captures session metadata:
   - `work_items_touched`: From database updated_at timestamps
   - `tasks_completed`: From task status changes during session
   - `git_commits`: From `git log` since session start
   - `commands_executed`: From CLI command count
3. Ends session: Sets `end_time`, calculates `duration_minutes`
4. Generates NEXT-SESSION.md with work summary
5. Clears current session file

### Performance

- **SessionStart**: ~180ms (database write + context load)
- **SessionEnd**: ~220ms (metadata capture + handover generation)
- **Total Overhead**: <400ms per Claude Code session

### Usage

**Automatic** (Default):
```bash
# Hooks run automatically when Claude Code starts/ends
claude code .
# SessionStart: session created, ID stored
# (work happens)
# SessionEnd: session finalized, handover generated
```

**Manual Override** (Rare):
```bash
# If hooks fail, sessions can be created manually
apm session start --type coding
# (work happens)
apm session end <session-id>
```

### Session Metadata Captured

From SessionEnd hook:
```python
metadata = {
    'work_items_touched': [35, 42],  # Auto-detected
    'tasks_completed': [166, 167],   # Auto-detected
    'git_commits': ['abc123', 'def456'],  # Auto-detected
    'commands_executed': 47,  # Auto-detected
    'decisions_made': [],  # Manual or AI-suggested
    'tool_specific': {
        'transcript_path': '.agentpm/sessions/2025-10-10.txt',
        'session_start_duration_ms': 185,
        'session_end_duration_ms': 150,
    }
}
```

### Graceful Degradation

Hooks continue working even if database fails:
- **SessionStart**: Shows warning, loads basic context from files
- **SessionEnd**: Generates NEXT-SESSION.md from git/filesystem only
- **Manual Recovery**: Sessions can be created retroactively via CLI

### Testing

```bash
# Test SessionStart hook
echo '{"session_id": "test-123"}' | .claude/hooks/session-start.py

# Test SessionEnd hook
echo '{"session_id": "test-123", "reason": "logout"}' | .claude/hooks/session-end.py

# Verify database
apm session list --limit 1
```

### Documentation

**Complete Guide**: See `docs/components/sessions/user-guide.md`
**CLI Reference**: See `docs/components/sessions/cli-reference.md`
**Examples**: See `docs/components/sessions/examples.md`
**Troubleshooting**: See `docs/components/sessions/troubleshooting.md`

### Migration from Pre-WI-35

**No Migration Needed**: SessionStart/SessionEnd hooks are additive
- Existing hooks continue working
- New hooks add database persistence
- Zero breaking changes to NEXT-SESSION.md format

**Upgrade Path**:
1. WI-35 deployed → Database table `sessions` created via migration
2. Hooks updated → Start writing to database
3. Old handover files → Remain compatible (filesystem-first, database-second)

---
