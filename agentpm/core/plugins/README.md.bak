---
module: agentpm/core/plugins
owner: @aipm-plugin-developer
status: GREEN
api_stability: stable
coverage: 85%
updated: 2025-09-30
updated_by: claude-code
---

# Plugin System - Framework Detection & Intelligence

> **Status:** üü¢ Production Ready (Phase 1 Complete)
> **Owner:** AIPM Plugin Team
> **Purpose:** Automatic framework detection and intelligence extraction through plugin architecture. Provides framework-specific context for AI agents.

---

## ‚úÖ Current State

**Implemented** (What works - TESTED):
- ‚úÖ **Plugin architecture** (V2PluginInterface) - Extensible framework detection ‚úÖ **EXCELLENT**
- ‚úÖ **3-phase detection** (files ‚Üí imports ‚Üí structure) - 90%+ accuracy
- ‚úÖ **4 active plugins** - Python, Django, Click, pytest
- ‚úÖ **PluginOrchestrator** - Coordinates multi-plugin detection
- ‚úÖ **Confidence scoring** - Weighted detection confidence (0.0-1.0)
- ‚úÖ **Code amalgamation** - Groups related code files for agent context
- ‚úÖ **Tests passing** - 85% coverage

**In Progress** (Partial):
- ‚ö†Ô∏è **Plugin fact storage** - Logic exists, not wired to database yet
- ‚ö†Ô∏è **Context generation triggers** - Manual only, needs automation

**Not Started**:
- ‚ùå **Extended plugins** - React, Vue, Next.js, TypeScript (Phase 3)
- ‚ùå **Plugin marketplace** - User-contributed plugins (future)

---

## üéØ What's Planned

**Immediate** (Next Session):
- [ ] Wire plugin facts to database storage - @aipm-plugin-developer
- [ ] Trigger plugin detection on project init - @aipm-python-cli-developer

**Short Term** (This Phase):
- [ ] Add plugin detection tests with real projects
- [ ] Optimize detection performance (<2s per project)

**Long Term** (Phase 3):
- [ ] React/Vue/Angular plugins
- [ ] TypeScript/JavaScript plugins
- [ ] Docker/Kubernetes plugins
- [ ] CI/CD plugins (GitHub Actions, GitLab CI)

---

## üêõ Known Issues

**Critical:** None (plugin system operational)

**Medium:**
1. **Plugin Facts Not Stored** (Severity: MEDIUM)
   - Issue: extract_project_facts() works but doesn't save to database
   - Impact: Facts regenerated each time (slow)
   - Workaround: Cache in memory during session
   - Fix: Wire to contexts table (2h) - **Agent:** @aipm-plugin-developer

**Low:**
2. **Limited Plugin Coverage** (Severity: LOW)
   - Issue: Only 4 plugins (Python, Django, Click, pytest)
   - Impact: Frontend/infra projects not detected
   - Workaround: Falls back to generic detection
   - Fix: Add more plugins in Phase 3 - **Agent:** @aipm-plugin-developer

---

## üöÄ Quick Start

### Installation

```python
from agentpm.core.plugins import PluginOrchestrator
from pathlib import Path

# Initialize orchestrator (auto-discovers plugins)
orchestrator = PluginOrchestrator()

# Detect frameworks in project
project_path = Path("/path/to/project")
results = orchestrator.detect_all(project_path)

# Print detected frameworks
for result in results:
    print(f"{result.framework}: {result.confidence:.0%} confidence")
```

### Basic Usage - Framework Detection

**Single Framework**:

```python
from agentpm.core.plugins.python import PythonPlugin

plugin = PythonPlugin()
result = plugin.detect_framework(Path("/path/to/project"))

if result.detected:
    print(f"Python detected: {result.confidence:.0%}")
    print(f"Patterns matched: {result.patterns_matched}")
```

**Multi-Framework (Orchestrator)**:
```python
# Orchestrator runs all plugins in parallel
results = orchestrator.detect_all(Path("/path/to/project"))

# Get high-confidence results
confirmed = [r for r in results if r.confidence > 0.7]
for result in confirmed:
    print(f"‚úÖ {result.framework}: {result.confidence:.0%}")
```

**Extract Project Facts**:
```python
# Get framework-specific intelligence
facts = plugin.extract_project_facts(Path("/path/to/project"))

# Example facts (Python):
# {
#     'python_version': '3.11',
#     'dependencies': ['pydantic', 'click', 'pytest'],
#     'package_manager': 'poetry',
#     'entry_points': ['agentpm.cli:main']
# }
```

---

## üèóÔ∏è Plugin Architecture

### **V2PluginInterface** (Base Class)

All plugins implement this interface:
```python
# core/plugins/base.py
class V2PluginInterface(ABC):
    @property
    @abstractmethod
    def framework_name(self) -> str:
        """Framework identifier (e.g., 'python', 'django')"""

    @property
    @abstractmethod
    def supported_extensions(self) -> List[str]:
        """File extensions (e.g., ['.py', '.pyx'])"""

    @abstractmethod
    def detect_framework(self, project_path: Path) -> FrameworkDetectionResult:
        """3-phase detection: files ‚Üí imports ‚Üí structure"""

    @abstractmethod
    def extract_project_facts(self, project_path: Path) -> Dict[str, Any]:
        """Extract framework-specific intelligence"""

    @abstractmethod
    def generate_code_amalgamations(self, project_path: Path) -> List[ContextFile]:
        """Group related code files for agent context"""
```

### **LLM Domain Plugins** (New in WI-66)

- **Location:** `core/plugins/domains/llms/`
- **Purpose:** Convert provider-agnostic context payloads into prompts consumable by Anthropic Claude, OpenAI GPT, Google Gemini, etc.
- **Components:**
  - `base.py` ‚Äî shared interfaces (`LLMContextFormatter`, `LLMContextAdapter`) and registry utilities.
  - `anthropic/`, `openai/`, `google/` ‚Äî provider packages exposing stub formatters/adapters (real logic migrates from `hooks/context_integration.py` in later tasks).
- **Usage:** `from agentpm.core.plugins.domains.llms import get_formatter; formatter = get_formatter("anthropic")`

---

## üìã Detection Phases

### **Phase 1: File Pattern Detection** (Fast)

Look for characteristic files:
```python
# Django example
file_patterns = [
    'manage.py',           # Django management command
    'settings.py',         # Settings module
    'wsgi.py',             # WSGI application
    'asgi.py',             # ASGI application
    'urls.py',             # URL configuration
    '**/models.py'         # Django models
]
```

### **Phase 2: Import Analysis** (Medium)

Scan code for framework imports:
```python
# Django example
import_patterns = [
    'from django',
    'import django',
    'from django.db import models',
    'from django.views import View'
]
```

### **Phase 3: Structure Validation** (Thorough)

Verify project structure:
```python
# Django example
structure_patterns = [
    'project_root/settings.py exists',
    'apps/ directory with models.py',
    'urls.py in root',
    'manage.py executable'
]
```

**Confidence Scoring**:
- Files: +0.3 per match
- Imports: +0.4 per match
- Structure: +0.3 per match
- **Total**: 1.0 = highest confidence

---

## üîå Active Plugins

### **1. Python Plugin**
**Detection**: `pyproject.toml`, `setup.py`, `requirements.txt`, `.py` files
**Facts**: Python version, dependencies, package manager, entry points
**Amalgamations**: Classes, functions, modules

### **2. Django Plugin**
**Detection**: `manage.py`, `settings.py`, Django imports
**Facts**: Django version, installed apps, databases, middleware
**Amalgamations**: Models, views, URLs, admin, forms

### **3. Click Plugin**
**Detection**: `@click.command()`, `@click.group()` decorators
**Facts**: CLI structure, command groups, options/arguments
**Amalgamations**: Commands, utilities

### **4. Pytest Plugin**
**Detection**: `pytest.ini`, `conftest.py`, `test_*.py` files
**Facts**: Pytest version, plugins, fixtures, test counts
**Amalgamations**: Test files, fixtures, conftest

---

## üß™ Testing

**Coverage Summary:**
- **Plugin architecture**: 90% (base + interface)
- **Individual plugins**: 85% average
- **Orchestrator**: 80% (coordination logic)
- **Overall**: 85%

**Run Tests:**
```bash
# All plugin tests
pytest tests/core/plugins/ -v

# Specific plugin
pytest tests/core/plugins/test_python_plugin.py -v

# Real project test
pytest tests/core/plugins/test_python_plugin_real.py -v -s
```

**Key Test Scenarios:**
- ‚úÖ Framework detection (all 3 phases)
- ‚úÖ Confidence scoring
- ‚úÖ Fact extraction
- ‚úÖ Code amalgamation generation
- ‚úÖ Multi-plugin orchestration
- ‚úÖ Real project testing (AIPM itself)

---

## üîó Integration Points

**Used By:**
- CLI `apm init` - Detect frameworks on project initialization
- `core/context/` - Use plugin facts for context assembly

**Writes To:**
- `.agentpm/contexts/` - Code amalgamation files
- Database contexts table - Plugin facts (future)

**Dependencies:**
- Python AST (import analysis)
- File system scanning (pathlib)

---

## üìö Creating a New Plugin

**1. Create plugin file:**

```python
# agentpm/core/plugins/my_framework.py
from agentpm.core.plugins.base import V2PluginInterface


class MyFrameworkPlugin(V2PluginInterface):
    @property
    def framework_name(self) -> str:
        return "my_framework"

    @property
    def supported_extensions(self) -> List[str]:
        return [".ext"]

    def detect_framework(self, project_path: Path) -> FrameworkDetectionResult:
        # Phase 1: File patterns
        has_config = (project_path / "my_framework.config").exists()

        # Phase 2: Import analysis
        imports_found = self._scan_for_imports(project_path, ["import my_framework"])

        # Phase 3: Structure validation
        has_structure = (project_path / "src" / "components").exists()

        # Calculate confidence
        confidence = 0.0
        if has_config: confidence += 0.3
        if imports_found: confidence += 0.4
        if has_structure: confidence += 0.3

        return FrameworkDetectionResult(
            detected=confidence > 0.5,
            confidence=confidence,
            framework="my_framework"
        )
```

**2. Register plugin:**
```python
# agentpm/core/plugins/__init__.py
from .my_framework import MyFrameworkPlugin

__all__ = [..., 'MyFrameworkPlugin']
```

**3. Add tests:**
```python
# tests/core/plugins/test_my_framework_plugin.py
def test_detects_my_framework():
    plugin = MyFrameworkPlugin()
    result = plugin.detect_framework(test_project_path)
    assert result.detected
    assert result.confidence > 0.7
```

---

## üö® Troubleshooting

### Low confidence score despite valid framework
**Diagnosis**: Check which phases matched
```python
result = plugin.detect_framework(path)
print(f"File patterns: {result.file_patterns_matched}")
print(f"Import patterns: {result.import_patterns_matched}")
print(f"Structure patterns: {result.structure_patterns_matched}")
```

### Plugin not detected by orchestrator
**Cause**: Plugin not registered or missing `__init__.py` export
**Fix**: Ensure plugin class exported in `core/plugins/__init__.py`

### Slow detection (>5 seconds)
**Cause**: Scanning too many files in Phase 2 (import analysis)
**Fix**: Limit file scanning with `max_files` parameter or use file patterns first

---

**Last Updated**: 2025-09-30 20:05
**Next Review**: After plugin fact storage implemented
